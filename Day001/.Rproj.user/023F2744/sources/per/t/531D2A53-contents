# R의 자료구조
## 변수 => 벡터 => 행렬 => 배열
## 행렬 => 데이터프레임 => 리스트
## 데이터 분석에 특화된 자료구조 => 데이터프레임

# 행렬(matrix): 벡터의 확장
## 행과 열로 구성된 2차원 배열
## 행렬(matrix)은 2차원만 가능, 배열(array)은 N차원이 가능한 자료구조
## cbind(열단위), rbind(행단위)는 기존 벡터를 묶어 배열을 생성할 때 사용한다.

help(matrix)

# 3행 3열 행렬 생성
## nrow = 행의 수 ncol = 열의 수
matrix(1:9, nrow = 3) # 행, 열 수가 같으면 행을 기준으로 하기에 열도 거기 맞춰서 입력됨.

## matrix 참조[행, 열]
matrix(1:9, nrow = 3, byrow = T)

## 행렬의 이름을 부여하는 함수 dimnames
dimnamex = list(c('r1', 'r2', 'r3'), c('c1', 'c2', 'c3'))
x = matrix(1:9, nrow = 3, byrow = T, dimnames = dimnamex)
x
#     c1 c2 c3
# r1  1  2  3
# r2  4  5  6
# r3  7  8  9

## 행렬에 요소 추출: 인덱스[행, 열]
x[1, ] # 1행만 출력. 값 1 2 3
x[, 3] # 3열만 출력. 값 3 6 9
x[c(1:2), ] # 1~2행 출력. 값 1 2 3 4 5 6
x[-1, -1] # 2~3행, 2~3열 출력. 값 5 6 8 9
x[2:3, 2:3] # 2~3행, 2~3열 출력. 값 5 6 8 9
x[, 'c2'] # 2열만 출력. 값 2 5 8
x[c(1, 3), c(1, 3)] # 1, 3행, 1, 3열 출력. 값 1 3 7 9

y = matrix(1:9, nrow = 3)
y
#       [,1] [,2] [,3]
# [1,]    1    4    7
# [2,]    2    5    8
# [3,]    3    6    9
y / 2 # 각각 2분의 1로 값이 변함

a = matrix(1:4, nrow = 2)
#       [,1] [,2]
# [1,]    1    3
# [2,]    2    4
b = matrix(5:8, nrow = 2)
#       [,1] [,2]
# [1,]    5    7
# [2,]    6    8
a - b
#       [,1] [,2]
# [1,]   -4   -4
# [2,]   -4   -4
a * b
#       [,1] [,2]
# [1,]    5   21
# [2,]   12   32
a %*% b
#       [,1] [,2]
# [1,]   23   31
# [2,]   34   46

## 전치 행렬: 행과 열의 위치를 바꿔주는 함수
t(a)
#       [,1] [,2]
# [1,]    1    2
# [2,]    3    4

xx = matrix(1:6, ncol = 3)
nrow(xx)
ncol(xx)

cbind(a, b)
#       [,1] [,2] [,3] [,4]
# [1,]    1    3    5    7
# [2,]    2    4    6    8
rbind(a, b)
> rbind(a, b)
#       [,1] [,2]
# [1,]    1    3
# [2,]    2    4
# [3,]    5    7
# [4,]    6    8

## 배열: array(벡터형 데이터, dim = c(행, 열))
## 3행 4열짜리 2차원 배열 생성
x = array(1:12, dim = c(3, 4))
#       [,1] [,2] [,3] [,4]
# [1,]    1    4    7   10
# [2,]    2    5    8   11
# [3,]    3    6    9   12

dim(x) # 행, 열을 알려줌

# 2행 2열짜리 행렬 3개를 생성하시오.
yy = array(1:12, dim = c(2, 2, 3))
# , , 1
# 
#       [,1] [,2]
# [1,]    1    3
# [2,]    2    4
# 
# , , 2
# 
#       [,1] [,2]
# [1,]    5    7
# [2,]    6    8
# 
# , , 3
# 
#       [,1] [,2]
# [1,]    9   11
# [2,]   10   12
yy[1, 1, 1] # 값 1 출력
yy[1, 2, 3] # 값 11 출력

# 행렬 연산 apply(행렬데이터, 방향, 연산함수)
## 방향: 1(행단위) , 2(열단위)
z = array(1:12, c(3, 4))
#       [,1] [,2] [,3] [,4]
# [1,]    1    4    7   10
# [2,]    2    5    8   11
# [3,]    3    6    9   12

sum(z) # 값 78
mean(z) # 값 6.5
apply(z, 1, sum) # 값 22 26 30
apply(z, 2, mean) # 값 2 5 8 11

# sample(): 벡터나 배열에서 샘플 추출
w = array(1:12, c(3, 4)) # c()앞에 dim = 생략
#       [,1] [,2] [,3] [,4]
# [1,]    1    4    7   10
# [2,]    2    5    8   11
# [3,]    3    6    9   12

help(sample)
sample(w, 10) # replace는 똑같은 값을 다시 추출할거냐고 묻는 옵션
sample(1:15, 20, replace = T) # 전체 수보다 뽑아낼 수가 더 크면 꼭 중복값 허용해줘야 함. 안그럼 오류남

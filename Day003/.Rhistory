lapply(iris[-5], mean)
colMeans(iris[, -5])
### 리스트를 데이터 프레임으로 변환할 때
### 1. unlist() 함수로 리스트를 벡터로 변환
unlist(lapply(iris[, -5], mean))
### 2. matrix() 함수로 벡터를 행렬로 변환
matrix(unlist(lapply(iris[, -5], mean)), ncol = 4, byrow = T)
### 3. as.data.frame() 함수로 행렬을 데이터 프레임으로 변환
as.data.frame(matrix(unlist(lapply(iris[, -5], mean)), ncol = 4, byrow = T))
### 4. names() 함수로 리스트로부터 컬럼명을 얻어와 데이터 프레임에 부여
names(iris[-5])
d<- as.data.frame(matrix(unlist(lapply(iris[, -5], mean)), ncol = 4, byrow = T))
d
names(d) <- names(iris[-5])
d
# sapply: lapply와 유사하지만 리스트 대신 행렬, 벡터 등으로 결과가 반환된다.
## iris 컬럼별 평균 계산
lapply(iris[, -5], mean)
sapply(iris[, -5], mean)
class(sapply(iris[, -5], mean))
x <- sapply(iris[, -5], mean)
as.data.frame(x)
as.data.frame(t(x))
sapply(iris, class)
result <- sapply(iris[, -5], function(x){x > 3})
class(result)
# tapply: 그룹별 처리를 위한 apply 함수
## tapply(데이터, 색인_어떤 그룹에 속하는 지 표현하는 것, 함수)
tapply(1:10, rep(1, 10), sum)
## 홀,짝별로 묶어서 합계를 구하시오.
tapply(1:10, 1:10 %% 2 == 1, sum)
### 행렬(행- 계절, 열- 성)
m <- matrix(1:8 ncol = 2, dimnames = list(c('spring', 'summer', 'fall', 'winter'),c('male', 'female')))
### 행렬(행- 계절, 열- 성)
m <- matrix(1:8, ncol = 2, dimnames = list(c('spring', 'summer', 'fall', 'winter'),c('male', 'female')))
m
### 분기별 남성과 여성 합계를 구하시오.
### 상반기(봄, 여름), 하반기(가을, 겨울)
tapply(m, 2, sum)
### 분기별 남성과 여성 합계를 구하시오.
### 상반기(봄, 여름), 하반기(가을, 겨울)
tapply(m, [1:2], sum)
### 분기별 남성과 여성 합계를 구하시오.
### 상반기(봄, 여름), 하반기(가을, 겨울)
tapply(m, m[1:2, ], sum)
?tapply
### 분기별 남성과 여성 합계를 구하시오.
### 상반기(봄, 여름), 하반기(가을, 겨울)
tapply(m, as.factor(m[1:2, ]), sum)
### 분기별 남성과 여성 합계를 구하시오.
### 상반기(봄, 여름), 하반기(가을, 겨울)
tapply(m, 1, sum)
### 분기별 남성과 여성 합계를 구하시오.
### 상반기(봄, 여름), 하반기(가을, 겨울)
tapply(m, 'spring', sum)
### 분기별 남성과 여성 합계를 구하시오.
### 상반기(봄, 여름), 하반기(가을, 겨울)
tapply(m, spring, sum)
### 분기별 남성과 여성 합계를 구하시오.
### 상반기(봄, 여름), 하반기(가을, 겨울)
tapply(m, m$spring, sum)
### 분기별 남성과 여성 합계를 구하시오.
### 상반기(봄, 여름), 하반기(가을, 겨울)
tapply(m, list(c(1, 1, 2, 2, 1, 1, 2, 2), c(1, 1, 1, 1, 2, 2, 2, 2)), sum)
#doBy 패키지
## summaryBy(), orderBy(), spliyBy(), sampleBy()
### summary(): 수치데이터의 기초통계량을 나타내는 함수
summary(iris)
quantile(iris$Sepal.Length)
install.packages('doBy')
library(doBy)
quantile(iris$Sepal.Length, seq(0, 1, by = 0.1))
## formula식: 독립변수 ~ 종속변수, 독립변수1 + 독립변수2 ~ 종속변수
summaryBy(Sepal.Length + Sepal.Width ~ Species, iris) # 종별로 길이와 넓이의 기초통계 요약
## formula식: .(all) 생략 가능
orderBy( ~ Speal.Width, iris)
## formula식: .(all) 생략 가능
orderBy( ~ Sepal.Width, iris)
orderBy( ~ Species + Sepal.Width, iris)
order(iris$Sepal.Width)
iris[order(iris$Sepal.Width)]
iris[order(iris$Sepal.Width), ]
sample(1:10, 5, replace = T) # replace = T 중복 허용
sample(1:10, 20)
## 데이터를 무작위로 섞어내는 역할을 사용한다.
iris[sample(NROW(iris), NROW(iris)), ]
sampleBy(~ Species, frac = 0.1, iris) # frac = 0.1 적어도 각 품종별로 10% 포함되게 출력
sampleBy(~ Species, frac = 0.1, data = iris) # frac = 0.1 적어도 각 품종별로 10% 포함되게 출력
## split(데이터, 분리조건) - 리스트로 반환된다.
split(iris, iris$Species)
lapply(iris[, 1:4], mean)
lapply(split(iris$Sepal.Width, iris$Species), mean)
# subset(): 소계
subset(iris, Species == 'setosa')
subset(iris, Species == 'setosa' & Sepal.length > 5.0)
subset(iris, Species == 'setosa' & Sepal.Length > 5.0)
subset(iris, select = c(Sepal.Length, Species))
subset(iris, select = -c(Sepal.Length, Species)) # 길이와 종만 나옴
# merge(): join과 같은 역할을 수행하는 함수
x <- data.frame(name = c('a', 'b', 'c'), math = c(1, 2, 3))
y <- data.frame(name = c('c', 'b', 'a'), kor = c(4, 5, 6))
cbind(x, y)
#     name math name kor
# 1    a    1    c   4
# 2    b    2    b   5
# 3    c    3    a   6
merge(x, y, all = T) # equi join
# sort(), order(): 데이터를 정렬하는 함수
x <- c(20, 11, 33, 50, 43)
sort(X) # 정렬 옵션, decrasing = T, 내림차순
sort(x) # 정렬 옵션, decrasing = T, 내림차순
sort(x, decreasing = T) # 정렬 옵션, decrasing = T, 내림차순
order(x)
order(-x) # 정렬 후 인덱스 반환 [1] 2 1 3 5 4
x[order(x)]
prinf(mean(Sepal.Width))
print(mean(Sepal.Width))
print(mean(Sepal.Width))
# with(), within()
mean(iris$Sepal.Length)
with(iris, mean(Sepal.Length))
print(mean(Sepal.Width))
x <- data.frame(val = c(1, 2, 3, 4, NA, 5, NA))
mean(x$val)
is.na(x$val)
mean(x$val, na.rm = T)
with(iris, mean(Sepal.Width))
print(mean(Sepal.Width))
print(mean(Sepal.Width))
mean(is.na(x$val))
print(mean(Sepal.Length)),
print(mean(Sepal.Width))
with(iris, {
print(mean(Sepal.Length))
print(mean(Sepal.Width))
})
with(iris, {
print(mean(Sepal.Length))
print(mean(Sepal.Width))
})
## ifelse(조건식, 참, 거짓)
## 수치데이터의 결측값을 보간하는 방법: 평균값 or 최빈값
x <- within(x, {
val <- ifelse(is.na(val), median(val, na.rm = T), val)
})
x
x$val[is.na(x$val)] <- median(x$val, na.rm = T)
x
x <- data.frame(val = c(1, 2, 3, 4, NA, 5, NA))
x$val[is.na(x$val)] <- median(x$val, na.rm = T)
x
iris[1, 1] <- NA
head(iris)
## 결측값이 존재하는 해당 품종의 중앙값으로 대체하는 작업
### step 1. setosa 품종의 Sepal. Length의 중앙값 계산
### step 2. 해당 중앙값으로 결측값 채우기
mean(iris$Species == 'setosa', Sepal.Length)
## 결측값이 존재하는 해당 품종의 중앙값으로 대체하는 작업
### step 1. setosa 품종의 Sepal. Length의 중앙값 계산
### step 2. 해당 중앙값으로 결측값 채우기
mean(iris$Species == 'setosa', iris$Sepal.Length)
rs <- sapply(split(iris$Sepal.Length, iris$Species), median)
rs
rs <- sapply(split(iris$Sepal.Length, iris$Species == 'strosa'), median)
rs
rs <- sapply(split(iris$Sepal.Length, iris$Species == 'setosa'), median)
rs
rs <- sapply(split(iris$Sepal.Length, iris$Species == 'setosa'), median, na.rm = T)
rs
rs <- sapply(split(iris$Sepal.Length, iris$Species), median, na.rm = T)
rs
iris <- within(iris, {
Sepal.Lenght <- ifelse(is.na(Sepal.Length), rs[Species], Sepal.Length)
})
head(iris)
iris <- within(iris, {
Sepal.Lenght <- ifelse(is.na(Sepal.Length), rs[Species], Sepal.Length)
})
head(iris)
Sepal.Length <- ifelse(is.na(Sepal.Length), rs[Species], Sepal.Length)
iris <- within(iris, {
Sepal.Length <- ifelse(is.na(Sepal.Length), rs[Species], Sepal.Length)
})
head(iris)
# attach(), detch()
iris$Sepal.Length
attach(iris)
Sepal.Lenght
detach(iris)
which(x %% 2)
which(x %% 2 == 0)
x %% 2
# which(), which.max(), which,min()
## which 함수는 벡터나 배열에서 주어진 조건에 만족하는 값이 있는 인덱스 반환
x <- c(2, 4, 6, 7, 10)
x %% 2
which(x %% 2 == 0) # x %% 2 [1] 0 0 0 1 0
x[which(x %% 2 == 0)]
sort(x)[-1]
sort(x)[1]
sort(-x)[1]
sort(x)[5]
sort(x, decreasing = T)[1]
-sort(-x)[1]
which.min(x)
which.max(x)
which.min(x) # 가장 큰 값의 인덱스인 [1] 1
sort(x)[1] # 가장 작은 값 [1] 2
# aggregate(): 그룹별 연산을 수행하는 함수
## aggreagte(데이터, 그룹조건, 함수) or aggregate(formular, 데이터, 함수)
### iris 데이터에서 품종별로 Sepal.Width의 평균 계산
aggregate(Sepal.Width ~ Species, iris, mean)
storeA <- c(20, 21, 23, 22, 26, 28, 35, 35, 41, 42, 43, 45, 44, 45, 46, 47, 47, 46, 47, 58, 58, 59, 60, 56, 57, 57, 80)
storeB <- c(5, 6, 11, 13, 15, 16, 20, 20, 21, 23, 22, 27, 27, 30, 30, 32, 36, 37, 37, 40 ,40 ,43, 44, 45, 51, 54, 70, 600)
storeC <- c(5, 5, 5, 12, 10, 11, 20, 20, 20, 20, 20, 21, 20, 30, 32, 31, 31, 31, 36, 40, 40, 51, 61, 51, 61, 70)
### A 식당과 B식당 중 어느 식당이 배달 시간이 가장 빠른지 분석
mean(storeA)
mean(storeB)
#### 600보다 작은 값을 대상으로 평균
mean(storeB < 600)
#### 600보다 작은 값을 대상으로 평균
storeB[storeB < 600]
#### 600보다 작은 값을 대상으로 평균
mean(storeB[storeB < 600])
### 중앙값: median
nums <- c(1, 5, 2, 3, 1000)
mean(nums)
median(nums)
median(storeA)
median(storeB)
### 사분위수 ntile
nums <- 1:17
quantile(nums)
a <- c(0, 1, 1, 1, 5, 9, 9, 9, 10)
b <- c(0, 4, 4, 4, 5, 6, 6, 6, 10)
# A집단
meadian(A)
# A집단
median(A)
rm(a,b)
A <- c(0, 1, 1, 1, 5, 9, 9, 9, 10)
B <- c(0, 4, 4, 4, 5, 6, 6, 6, 10)
# A집단
median(A)
median(B)
quantile(storeA)
quantile(storeB)
# boxplot: 상자 수염 그래프
boxplot(storeB)
boxplot(storeA, storeB)
boxplot(storeA, storeB, names = c('A식당', 'B식당'))
boxplot(mean(storeB[storeB < 600]))
boxplot(storeB[storeB < 600])
# boxplot: 상자 수염 그래프
boxplot(storeA, storeB[storeB < 600], names = c('A식당', 'B식당'))
# 데이터 시각화: plot(), barplot(), boxplot(), hist(), pie() => ggplot2
## plot(): 산점도 그래프
## plot(y축 데이터, 옵션) or plot(x축 데이터, y축 데이터, 옵션)
x <- c(1, 1, 2, 2, 3, 3, 4, 4, 5, 5)
plot(y)
# 데이터 시각화: plot(), barplot(), boxplot(), hist(), pie() => ggplot2
## plot(): 산점도 그래프
## plot(y축 데이터, 옵션) or plot(x축 데이터, y축 데이터, 옵션)
y <- c(1, 1, 2, 2, 3, 3, 4, 4, 5, 5)
plot(y)
## pch: 심볼모양
plot(y, pch = 0)
## pch: 심볼모양 0= 빈 네모,
plot(y, pch = 1)
## pch: 심볼모양 0= 빈 네모, 1= 빈 동그라미,
plot(y, pch = 2)
## pch: 심볼모양 0= 빈 네모, 1= 빈 동그라미, 2= 빈 세모
plot(y, pch = 3)
## pch: 심볼모양 0= 빈 네모, 1= 빈 동그라미, 2= 빈 세모 3= +, 4=
plot(y, pch = 4)
## pch: 심볼모양 0= 빈 네모, 1= 빈 동그라미, 2= 빈 세모 3= +, 4= x, 5=
plot(y, pch = 5)
## pch: 심볼모양 0= 빈 네모, 1= 빈 동그라미, 2= 빈 세모 3= +, 4= x, 5= 빈 마름모
plot(y, pch = 18)
x <- 1:10
y <- 1:10
plot(x, y)
plot(cars$speed, cars$dist)
# xlab, ylab - x, y축 이름
# main - 그래프 제목
# sub - 그래프 부제목
# ann - F/T, 제목 지정 여부
# axes - F/T, 축 표시 여부
# axis - 사용자 지정 축값
# type - 그래프 종류
plot(x, y, pch = *)
# xlab, ylab - x, y축 이름
# main - 그래프 제목
# sub - 그래프 부제목
# ann - F/T, 제목 지정 여부
# axes - F/T, 축 표시 여부
# axis - 사용자 지정 축값
# type - 그래프 종류
plot(x, y, pch = '*')
# xlab, ylab - x, y축 이름
# main - 그래프 제목
# sub - 그래프 부제목
# ann - F/T, 제목 지정 여부
# axes - F/T, 축 표시 여부
# axis - 사용자 지정 축값
# type - 그래프 종류(l=line)
plot(x, y, pch = '*', type = 'b')
# xlab, ylab - x, y축 이름
# main - 그래프 제목
# sub - 그래프 부제목
# ann - F/T, 제목 지정 여부
# axes - F/T, 축 표시 여부
# axis - 사용자 지정 축값
# type - 그래프 종류(l=line)
plot(x, y, pch = '*', type = 'l')
# xlab, ylab - x, y축 이름
# main - 그래프 제목
# sub - 그래프 부제목
# ann - F/T, 제목 지정 여부
# axes - F/T, 축 표시 여부
# axis - 사용자 지정 축값
# type - 그래프 종류(l=line)
plot(x, y, pch = '*', type = 'b')
# xlab, ylab - x, y축 이름
# main - 그래프 제목
# sub - 그래프 부제목
# ann - F/T, 제목 지정 여부
# axes - F/T, 축 표시 여부
# axis - 사용자 지정 축값
# type - 그래프 종류(l = line, p = point, b = both)
# lty(line style): 0(' blank)
plot(x, y, pch = '*', type = 'l', lty = 0)
# xlab, ylab - x, y축 이름
# main - 그래프 제목
# sub - 그래프 부제목
# ann - F/T, 제목 지정 여부
# axes - F/T, 축 표시 여부
# axis - 사용자 지정 축값
# type - 그래프 종류(l = line, p = point, b = both)
# lty(line style): 0(' blank)
plot(x, y, pch = '*', type = 'l', lty = 'black')
# xlab, ylab - x, y축 이름
# main - 그래프 제목
# sub - 그래프 부제목
# ann - F/T, 제목 지정 여부
# axes - F/T, 축 표시 여부
# axis - 사용자 지정 축값
# type - 그래프 종류(l = line, p = point, b = both)
# lty(line style): 0(' blank)
plot(x, y, pch = '*', type = 'l', length = 2, lty = 'black')
# xlab, ylab - x, y축 이름
# main - 그래프 제목
# sub - 그래프 부제목
# ann - F/T, 제목 지정 여부
# axes - F/T, 축 표시 여부
# axis - 사용자 지정 축값
# type - 그래프 종류(l = line, p = point, b = both)
# lty(line style): 0(' blank)
plot(x, y, pch = '*', type = 'l', lty = 'dashed')
# xlab, ylab - x, y축 이름
# main - 그래프 제목
# sub - 그래프 부제목
# ann - F/T, 제목 지정 여부
# axes - F/T, 축 표시 여부
# axis - 사용자 지정 축값
# type - 그래프 종류(l = line, p = point, b = both)
# lty(line style): 0(' blank)
plot(x, y, pch = '*', type = 'l', lty = 'dashed', col = 1)
# xlab, ylab - x, y축 이름
# main - 그래프 제목
# sub - 그래프 부제목
# ann - F/T, 제목 지정 여부
# axes - F/T, 축 표시 여부
# axis - 사용자 지정 축값
# type - 그래프 종류(l = line, p = point, b = both)
# lty(line style): 0(' blank)
plot(x, y, pch = '*', type = 'l', lty = 'dashed', col = 2)
# xlab, ylab - x, y축 이름
# main - 그래프 제목
# sub - 그래프 부제목
# ann - F/T, 제목 지정 여부
# axes - F/T, 축 표시 여부
# axis - 사용자 지정 축값
# type - 그래프 종류(l = line, p = point, b = both)
# lty(line style): 0(' blank)
plot(x, y, pch = '*', type = 'l', lty = 'dashed', col = 24)
# xlab, ylab - x, y축 이름
# main - 그래프 제목
# sub - 그래프 부제목
# ann - F/T, 제목 지정 여부
# axes - F/T, 축 표시 여부
# axis - 사용자 지정 축값
# type - 그래프 종류(l = line, p = point, b = both)
# lty(line style): 0(' blank)
plot(x, y, pch = '*', type = 'l', lty = 'dashed', col = 2)
x <- runif(100)
y <- runif(100)
## y 값이 0.5보다 크면 1, 아니면 18
plot(x, y, pch =  if(y > 0.5, 1, 18))
## y 값이 0.5보다 크면 1, 아니면 18
plot(x, y, pch =  ifels(y > 0.5, 1, 18))
## y 값이 0.5보다 크면 1, 아니면 18
plot(x, y, pch =  ifelse(y > 0.5, 1, 18))
## 산점도 + 텍스트 추가
library(MASS)
str(Animals)
Animals
plot(Animals$body, Animals$brain, pch = 16, col = 'blue', xlab = 'Body weight(kg)', ylab = 'Brain weight(g)')
plot(Animals$body, Animals$brain, pch = 16, col = 'blue', xlab = 'Body weight(kg)', ylab = 'Brain weight(g)', xlim = c(0, 250), ylim = (0, 1400))
plot(Animals$body, Animals$brain, pch = 16, col = 'blue', xlab = 'Body weight(kg)', ylab = 'Brain weight(g)', xlim = c(0, 250), ylim = c(0, 1400))
text(x = Animals$body, y = Animals$brain, labels = row.names(Animals))
plot(Animals$body, Animals$brain, pch = 16, col = 'blue', xlab = 'Body weight(kg)', ylab = 'Brain weight(g)', xlim = c(0, 250), ylim = c(0, 1400))
text(x = Animals$body, y = Animals$brain, labels = row.names(Animals), pos = 4)
plot(iris$Sepal.Length, iris$Sepal.Width, col = iris$Species)
legend('topright', legend = levels(iris$Species))
help(plot)
?plot
plot(~ Sepal.Length + Sepal.Width, data = iris, pch = rep(15:17, each = 50), col = c('red', 'green'. 'blue')[iris$Species], cex = 1.5)
plot(~ Sepal.Length + Sepal.Width, data = iris, pch = rep(15:17, each = 50), col = c('red', 'green', 'blue')[iris$Species], cex = 1.5)
legend('topright', legend = levels(iris$Species), pch = 15:17, col =c c('red', 'green', 'blue'), cex = 1.2, bty = 2)
legend('topright', legend = levels(iris$Species), pch = 15:17, col = c('red', 'green', 'blue'), cex = 1.2, bty = 2)
?barplot
barplot(sales)
# 막대그래프: barplot(), 도수분포표, 빈도
sales <- c(0.12, 0.3, 0.26, 0.16, 0.04, 0.12)
barplot(sales)
barplot(sales, naems.org c('berry', 'cheery', 'apple', 'banana', 'candy', 'cream'), horiz = T)
barplot(sales, naems.org = c('berry', 'cheery', 'apple', 'banana', 'candy', 'cream'), horiz = T)
barplot(sales, naems.arg = c('berry', 'cheery', 'apple', 'banana', 'candy', 'cream'), horiz = T)
barplot(sales, naems.arg = c('berry', 'cheery', 'apple', 'banana', 'candy', 'cream'), horiz = T)
# 막대그래프: barplot(), 도수분포표, 빈도
sales <- c(0.12, 0.3, 0.26, 0.16, 0.04, 0.12)
barplot(sales, naems.arg = c('berry', 'cheery', 'apple', 'banana', 'candy', 'cream'), horiz = T)
barplot(sales,
names.arg = c('berry', 'cheery', 'apple', 'banana', 'candy', 'cream'), horiz = T)
# 누적 막대그래프
xx <- matrix(1:6, nrow = 3)
barplot(xx)
aaa <- c(110, 300, 150, 280, 310)
bbb <- c(180, 200, 210, 190, 170)
ccc <- c(210, 150, 260, 210, 70)
data <- matirx(c(aaa, bbb, ccc), nrow = 5)
data <- matrix(c(aaa, bbb, ccc), nrow = 5)
data
#       [,1] [,2] [,3]
# [1,]  110  180  210
# [2,]  300  200  150
# [3,]  150  210  260
# [4,]  280  190  210
# [5,]  310  170   70
barplot(data, main = '스포츠 경기별 티켓 판매량', xlab = '종목', ylab = '판매량', beside = T,
names.arg = c('야구', '축구', '농구'), border = 'blue', col = rainbow(5), ylim = c(0, 800))
#       [,1] [,2] [,3]
# [1,]  110  180  210
# [2,]  300  200  150
# [3,]  150  210  260
# [4,]  280  190  210
# [5,]  310  170   70
barplot(data, main = '스포츠 경기별 티켓 판매량', xlab = '종목', ylab = '판매량', beside = T,
names.arg = c('야구', '축구', '농구'), border = 'blue', col = rainbow(5), ylim = c(0, 300))
#       [,1] [,2] [,3]
# [1,]  110  180  210
# [2,]  300  200  150
# [3,]  150  210  260
# [4,]  280  190  210
# [5,]  310  170   70
barplot(data, main = '스포츠 경기별 티켓 판매량', xlab = '종목', ylab = '판매량', beside = T,
names.arg = c('야구', '축구', '농구'), border = 'blue', col = rainbow(5), ylim = c(0, 800))
#       [,1] [,2] [,3]
# [1,]  110  180  210
# [2,]  300  200  150
# [3,]  150  210  260
# [4,]  280  190  210
# [5,]  310  170   70
barplot(data, main = '스포츠 경기별 티켓 판매량', xlab = '종목', ylab = '판매량', beside = F,
names.arg = c('야구', '축구', '농구'), border = 'blue', col = rainbow(5), ylim = c(0, 800))
#       [,1] [,2] [,3]
# [1,]  110  180  210
# [2,]  300  200  150
# [3,]  150  210  260
# [4,]  280  190  210
# [5,]  310  170   70
barplot(data, main = '스포츠 경기별 티켓 판매량', xlab = '종목', ylab = '판매량', beside = T,
names.arg = c('야구', '축구', '농구'), border = 'blue', col = rainbow(5), ylim = c(0, 400))
legend(16, 400, c('야구', '축구', '농구'), cex = 0.8, fill = rainbow(5))
# ggplot2
library(ggplot2)
# ggplot2
library(ggplot2)
# 단순하게 그래프를 그리는 qplot(x, y, 옵션)
qplot(Sepal.Length, Petal.Length, data = iris)
x <- c(1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 4, 5, 6)
y <- c(2, 1, 4, 2, 3, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1)
df <- data.frame(x, y)
sunflowerplot(df)
stars(mtcars[1:4], flip.labels = F, key.loc = c(13, 1.5))
# ggolot 시각화 단계 - 레이어 구조
## step 1. 도화지(캔버스-배경) - 축을 그린다.
ggolot(data = mpg, aes(x = displ, y = hwy))
# ggolot 시각화 단계 - 레이어 구조
## step 1. 도화지(캔버스-배경) - 축을 그린다.
gglot(data = mpg, aes(x = displ, y = hwy))
# ggolot 시각화 단계 - 레이어 구조
## step 1. 도화지(캔버스-배경) - 축을 그린다.
ggplot(data = mpg, aes(x = displ, y = hwy))
## step 2. 그래프의 종류
### geom_bar(): 막대그래프, geom_histogram(): 히스토그램, geom_boxplot(): 박스플롯, geom_line(): 선 그래프, geom_point(): 산점도 그래프
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point()
## step 3. 기타 옵션을 지정해 그래프르 정교하게 표현
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point() + xlim(3, 6)
## step 3. 기타 옵션을 지정해 그래프르 정교하게 표현
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point() + xlim(3, 6) + ylim(10, 30)

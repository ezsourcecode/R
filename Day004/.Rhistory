## 그래프 영역에 투명 박스나 화살표를 이용하여 특정 영역을 강조하는 역할
## mtcars 데이터셋에 무게와 연비를 기준으로 산점도 그래프를 구현한다.
ggplot(mtcars, aes(x = wt, y = mpg)) + geom_point() + annotate('rect')
# 도형이나 화살표 추가: annotate('모양', xmin = x축 시작, xmax = x축 끝, ymin = y축 시작, ymax = y축 끝)
## 그래프 영역에 투명 박스나 화살표를 이용하여 특정 영역을 강조하는 역할
## mtcars 데이터셋에 무게와 연비를 기준으로 산점도 그래프를 구현한다.
ggplot(mtcars, aes(x = wt, y = mpg)) + geom_point() + annotate('rect')
? annotate
# 도형이나 화살표 추가: annotate('모양', xmin = x축 시작, xmax = x축 끝, ymin = y축 시작, ymax = y축 끝)
## 그래프 영역에 투명 박스나 화살표를 이용하여 특정 영역을 강조하는 역할
## mtcars 데이터셋에 무게와 연비를 기준으로 산점도 그래프를 구현한다.
ggplot(mtcars, aes(x = wt, y = mpg)) + geom_point() + annotate('rect', xmin = 3, xmax = 4, ymin = 12, ymax = 20)
# 도형이나 화살표 추가: annotate('모양', xmin = x축 시작, xmax = x축 끝, ymin = y축 시작, ymax = y축 끝)
## 그래프 영역에 투명 박스나 화살표를 이용하여 특정 영역을 강조하는 역할
## mtcars 데이터셋에 무게와 연비를 기준으로 산점도 그래프를 구현한다.
ggplot(mtcars, aes(x = wt, y = mpg)) + geom_point() + annotate('rect', xmin = 3, xmax = 4, ymin = 12, ymax = 20, alpha = 0.5)
# 도형이나 화살표 추가: annotate('모양', xmin = x축 시작, xmax = x축 끝, ymin = y축 시작, ymax = y축 끝)
## 그래프 영역에 투명 박스나 화살표를 이용하여 특정 영역을 강조하는 역할
## mtcars 데이터셋에 무게와 연비를 기준으로 산점도 그래프를 구현한다.
ggplot(mtcars, aes(x = wt, y = mpg)) + geom_point() + annotate('rect', xmin = 3, xmax = 4, ymin = 12, ymax = 20, alpha = 0.5, fill = 'skyblue')
## annotate() 함수의 모양 부분에 segment(화살표), x, xend, y, yend를 추가
ggplot(mtcars, aes(x = wt, y = mpg)) + geom_point() + annotate('rect', xmin = 3, xmax = 4, ymin = 12, ymax = 20, alpha = 0.5, fill = 'skyblue') + annotate('segment', x = 2.5, xend  = 3.7, y = 10, yend = 17)
## annotate() 함수의 모양 부분에 segment(화살표), x, xend, y, yend를 추가
ggplot(mtcars, aes(x = wt, y = mpg)) + geom_point() + annotate('rect', xmin = 3, xmax = 4, ymin = 12, ymax = 20, alpha = 0.5, fill = 'skyblue') + annotate('segment', x = 2.5, xend  = 3.7, y = 10, yend = 17, arrow = arrow(), color = 'red')
## annotate() 함수의 모양 부분에 segment(화살표 쓰기 위한), x, xend, y, yend를 추가
ggplot(mtcars, aes(x = wt, y = mpg)) + geom_point() + annotate('rect', xmin = 3, xmax = 4, ymin = 12, ymax = 20, alpha = 0.5, fill = 'skyblue') + annotate('segment', x = 2.5, xend  = 3.7, y = 10, yend = 17, arrow = arrow(), color = 'red') + annotate('text', x = 2.5, y = 10, label = 'point')
# 그래프 제목, 축 제목 추가: labs()
## labs(x = 'x축 제목', y = 'y축 제목', title = '그래프 제목')
ggplot(mtcars, aes(x = gear)) + geom_bar()
# 그래프 제목, 축 제목 추가: labs()
## labs(x = 'x축 제목', y = 'y축 제목', title = '그래프 제목')
ggplot(mtcars, aes(x = gear)) + geom_bar() + labs(x = '기어 수', y = '자동차 수', title = '기어별 자동차 수')
ggplot(mtcars, aes(x = cty)) + geom_boxplot()
## gear의 빈도값을 포함한 누적 막대 그래프
## fill - 해당 축 값을 색상으로 채움(factor 사용 안 했더니 색 안 나옴)
# 빈 값이 있어 factor를 사용함 #
ggplot(mtcars, aes(x = factor(cyl))) + geom_bar(aes(fill = factor(gear)))
? filter
help(filter)
help("filter")
library(dplyr)
?filter
filter(mtcars[c('compact', 'subcompact', 'suv')])
filter(mtcars[c('compact', 'subcompact', 'suv'),])
# 데이터 정제: 이상치와 결측치 처리
## 결측치(missing values): 누락된 값
### is.na()
### na.omit(): NA 결측값이 존재하는 행 제거
### na.rm = T/F
str(airquality)
head(is.na(airquality))
table(is.na(airquality$Temp))
table(is.na(airquality))
table(is.na(airquality$Ozone))
mean(airquality$Temp)
mean(airquality$Ozone)
# Ozone에서 결측값이 아닌 데이터만 추출
air_narm <- airquality[!is.na(airquality$Ozone), ]
air_narm
mean(air_narm$Ozone)
air_omit <- na.omit(airquality)
mean(air_omit$Ozone)
mean(airquality$Ozone, na.rm = T)
## 이상치(outlier)
patients <- data.frame(name = c('환자1', '환자2', '환자3', '환자4', '환자5'),
age = c(22, 30, 41, 27, 38),
gender = factor(c('M', 'F', 'M', 'K', 'F')),
blood.type = factor(c('A', 'O', 'B', 'AB', 'C')))
patients
str(patients)
### 성별에서 이상치를 제거하고 추출
patients_omit <- patients[patients$gender == 'M' | patients$gender == 'F', ]
patients_omit
### patients에서 성별과 혈액형의 이상치를 제거하고 추출
patients_outlier <- patients[c(patients$gender == 'M' | patients$gender == 'F', patients$blood.type == 'A' | patients$blood.type == 'B' | patients$blood.type == 'AB' | patients$blood.type == 'O'), ]
patients_outlier
### patients에서 성별과 혈액형의 이상치를 제거하고 추출
patients_outlier <- patients[(patients$gender == 'M' | patients$gender == 'F') & (patients$blood.type == 'A' | patients$blood.type == 'B' | patients$blood.type == 'AB' | patients$blood.type == 'O'), ]
patients_outlier
patients1 <- data.frame(name = c('환자1', '환자2', '환자3', '환자4', '환자5'),
age = c(22, 30, 41, 27, 38),
gender = c(1, 2, 1, 3, 2),
blood.type = c(1, 3, 2, 4, 5))
patients1$gender <- ifelse(patients1$gender > 2, NA)
patients1$gender <- ifelse(patients1$gender > 2, NA, patients1$gender)
patients1
## 혈액형의 이상치를 결측치 처리
table(patients1$blood.type)
patients1$blood.type <- ifelse(patients$blood.type > 5, NA, patients1$blood.type)
patients1$blood.type <- ifelse(patients$blood.type > 4, NA, patients1$blood.type)
patients1$blood.type <- ifelse(patients1$blood.type > 4, NA, patients1$blood.type)
pati
patients1
patients1 <- data.frame(name = c('환자1', '환자2', '환자3', '환자4', '환자5'),
age = c(22, 30, 41, 27, 38),
gender = c(1, 2, 1, 3, 2),
blood.type = c(1, 3, 2, 4, 5))
patients1$gender <- ifelse(patients1$gender > 2, NA, patients1$gender)
patients1$blood.type <- ifelse(patients1$blood.type > 4, NA, patients1$blood.type)
patients1
## 이상치를 판단하기 어려운 데이터의 처리
boxplot(airquality[, 1:4])
boxplot(airquality[, 1])$stats
## Ozone 컬럼에 이상치를 찾아 결측처리
air <- airquality
air$Ozone <- ifelse(air$Ozone < 1 | air$Ozone > 122, NA, air$Ozone)
table(is.na(air$Ozone))
## cars 데이터셋의 dist 이상치를 제거한 후 dist의 평균을 계산하시오.
### 단, 이상치 판단은 boxplot()을 사용할 것
C <- cars
View(cars)
boxplot(C[, 2])$stats
table(C$dist)
table(is.na(C$dist))
C$dist <- ifelse(C$dist < 2 | C$dist > 93, NA, C$dist)
table(is.na(C$dist)) # FALSE 50
mean(C$dist)
mean(C$dist, na.rm = T)
## ChickWeight 데이터에서 병아리 무게(weight)의 이상치를 제거한 후 평균 무게를 구하시오.
### 단, 이상치 판단은 boxplot()을 사용할 것
chick <- ChickWeight
View(ChickWeight)
boxplot(chick[, 3])$stats
boxplot(chick[, 1])$stats
table(is.na(chick$weight))
chick$weight <- ifelse(chick$weight < 35 | chick$weightt > 309, NA, chick$weight)
## filter(df, x): 행 추출, subset()
## select(df, x, y): 열 추출, df[, c('x', 'y')]
## mutate(df, z = x + y): 열 추가(파생변수), df$z <- df$x + df$y, transform()
## arrange(df, x): 정렬, order(), sort()
## distinct(df, x): unique 행 추출, unique()
## rename(df, y= x): 변수명 변경, names(df)[names(df) == 'x'] <- 'y'
## summerise(): 집계, aggregate()
## group_by(): 그룹별 집계
## inner_join(df1, df2), merge(df1, df2)
## left_join(df1, df2), merge(df1, df2, all.x = T)
install.packages("gapminder")
library(gapminder)
str(gapminder)
head(gapminder, 10)
head(gapminder, 20)
chick$weight <- ifelse(chick$weight < 35 | chick$weight > 309, NA, chick$weight)
table(is.na(chick$weight)) # 이상치 제거 전 FALSE 578 후 FALSE
mean(chick$weight, na.rm = T)
## 각 나라별 기대수명을 추출
gapminder[, c('country', 'lifeExp')]
## 각 나라별 기대수명과 측정연도
gapminder[, c('country', 'lifeExp', 'year')]
select(gapminder, country, lifeExp) # 컬럼명이라 select, 행 추출은 filter #
gapmider %>%
select(country, lifExp)
gapminder %>%
select(country, lifExp)
gapminder %>%
select(country, lifeExp)
Viw(gapminder)
View(gapminder)
gapminder[gapminder$country == 'Croatia', ]
filter(gapminder, country == 'Croatia')
gapminder[gapminder$country == 'Croatia', c('pop', 'lifeExp')]
# Croatiadml 1990년 이후의 기대수명과 인구를 추출
gapminder[gapminder$country == 'Croatia' & gapminder$year > 1990, c('pop', 'lifeExp')]
# Croatia의 기대수명과 인구의 평균을 추출하시오.
gapminder[gapminder$country == Croatia, apply(gapminder, 1, mean)]
# Croatia의 기대수명과 인구의 평균을 추출하시오.
gapminder[gapminder$country == 'Croatia', apply(gapminder, 2, mean)] # apply 1- 행, 2-열
# Croatia의 기대수명과 인구의 평균을 추출하시오.
gapminder[gapminder$country == 'Croatia', apply(gapminder$pop, 2, mean)] # apply 1- 행, 2-열
# Croatia의 기대수명과 인구의 평균을 추출하시오.
apply(gapminder[gapminder$country == 'Croatia', c('pop', 'lifeExp')], 2, mean) # apply 1- 행, 2-열
gapminder >%>
gapminder %>%
filter(country == 'Croatia', c('pop', 'lifeExp'))
gapminder %>%
filter(country == 'Croatia') %>%
select(pop, lifeExp)
# 인구(pop) 평균
summarise(gapminder, mean(pop))
summarise(gapminder, mean(pop))
# 대륙별 인구 평균
summarise(gapminder, .groups = continent, mean(pop))
# 대륙별 인구 평균
summarise(group_by(gapminder, continent), mean(pop))
gapminder %>%
group_by(continent) %>%
summarise(mean(pop))
# 대륙별 나라의 인구 평균
gapminder %>%
group_by(continent, country) %>%
summarise(mean(pop))
# 대륙별 나라의 인구 평균
gapminder %>%
group_by(continent, country) %>%
summarise(mean(pop))
# mtcars
## 행 추출: filter(데이터, 조건식)
str(mtcars)
mtcars %>%
filter(cyl == 4)
### 실린더가 6기통 이상, 연비(mpg)가 20을 초과하는 자동차 정보만 추출ㄹ
mtcars %>%
filter(cyl == 6) %>%
select(mpg > 20)
### 실린더가 6기통 이상, 연비(mpg)가 20을 초과하는 자동차 정보만 추출
mtcars %>%
filter(cyl == 6 & mpg > 20) %>%
mtcars %>%
filter(cyl == 6 & mpg > 20)
mtcars %>%
filter(cyl == 6 & mpg > 20)
## 열추출: select(데이터명, 변수명 ...)
### mtcars에서 변속기(am), 기어(gear) 데이터만 추출
mtcars %>%
filter(am, gear)
## 열추출: select(데이터명, 변수명 ...)
### mtcars에서 변속기(am), 기어(gear) 데이터만 추출
mtcars %>%
filter(c(am, gear))
## 열추출: select(데이터명, 변수명 ...)
### mtcars에서 변속기(am), 기어(gear) 데이터만 추출
mtcars %>%
filter(am)
## 열추출: select(데이터명, 변수명 ...)
### mtcars에서 변속기(am), 기어(gear) 데이터만 추출
mtcars %>%
select(am)
## 열추출: select(데이터명, 변수명 ...)
### mtcars에서 변속기(am), 기어(gear) 데이터만 추출
mtcars %>%
select(am, gear)
## 정렬: arrange(데이터, 변수명1, 변수명2 ...), arrange(데이터, desc(변수명))
### mtcars에서 무게(wt)를 기준으로 오름차순 정렬한 후 상위 6개만 추출
mtcars %>%
arrange(wt)
## 정렬: arrange(데이터, 변수명1, 변수명2 ...), arrange(데이터, desc(변수명))
### mtcars에서 무게(wt)를 기준으로 오름차순 정렬한 후 상위 6개만 추출
mtcars %>%
arrange(wt, 6)
## 정렬: arrange(데이터, 변수명1, 변수명2 ...), arrange(데이터, desc(변수명))
### mtcars에서 무게(wt)를 기준으로 오름차순 정렬한 후 상위 6개만 추출
mtcars %>%
arrange(wt) %>%
head(6)
## 열 추가: mutate(데이터, 추가할 변수명 = 조건 ...)
### mtcars에서 year라는 생산년도를 담을 열을 추가 후 1974 값 표시
c_mt <- mtcars
c_mt %>%
mutate(year = 1974)
### 자동차별 연비(mpg) 순위를 구하여 mpg_rank 열을 추가해 표시
c_mt %>%
mpg_rank <- rank(mpg) %>%
mutate(mpg_rank = mpg_rank)
rank(c_mt$wt)
rank(-c_mt$wt)
## 중복값 제거: distinct(데이터, 변수명)
### mtcars에서 실린더(cyl) 개수에 따른 종류와 기어(gear) 개수에 따른 종류 추출
c_mt %>%
distinct(cyl, gear)
## 요약: summerise(데이터, 요약 변수명 = 기술 통계 함수)
### 자동차 실린더(cyl) 개수의 평균, 최소, 최대 추출
c_mt %>%
summerise(cyl)
## 요약: summarise(데이터, 요약 변수명 = 기술 통계 함수)
### 자동차 실린더(cyl) 개수의 평균, 최소, 최대 추출
c_mt %>%
summarise(cyl)
## 요약: summarise(데이터, 요약 변수명 = 기술 통계 함수)
### 자동차 실린더(cyl) 개수의 평균, 최소, 최대 추출
c_mt %>%
summarise(cyl, mm = mean)
## 요약: summarise(데이터, 요약 변수명 = 기술 통계 함수)
### 자동차 실린더(cyl) 개수의 평균, 최소, 최대 추출
c_mt %>%
summarise(mm = mean(cyl))
## 요약: summarise(데이터, 요약 변수명 = 기술 통계 함수)
### 자동차 실린더(cyl) 개수의 평균, 최소, 최대 추출
c_mt %>%
summarise(mn = mean(cyl), mi = min(cyl), ma = max(syl))
## 요약: summarise(데이터, 요약 변수명 = 기술 통계 함수)
### 자동차 실린더(cyl) 개수의 평균, 최소, 최대 추출
c_mt %>%
summarise(mn = mean(cyl) & mi = min(cyl) & ma = max(syl))
## 요약: summarise(데이터, 요약 변수명 = 기술 통계 함수)
### 자동차 실린더(cyl) 개수의 평균, 최소, 최대 추출
c_mt %>%
summarise(mn = mean(cyl),  mi = min(cyl), ma = max(syl))
## 요약: summarise(데이터, 요약 변수명 = 기술 통계 함수)
### 자동차 실린더(cyl) 개수의 평균, 최소, 최대 추출
c_mt %>%
summarise(mn = mean(cyl),  mi = min(cyl), ma = max(cyl))
## 그룹설정: group_by(데이터, 변수명)
### 동일한 실린더 개수를 가진 차가 몇 대인지 추출
c_mt %>%
group_by(cyl)
## 그룹설정: group_by(데이터, 변수명)
### 동일한 실린더 개수를 가진 차가 몇 대인지 추출
c_mt %>%
group_by(cyl) %>%
count(cyl)
### 실린더가 6기통 이상, 연비(mpg)가 20을 초과하는 자동차 정보만 추출
mtcars %>%
filter(cyl >= 6 & mpg > 20)
## 정렬: arrange(데이터, 변수명1, 변수명2 ...), arrange(데이터, desc(변수명))
### mtcars에서 무게(wt)를 기준으로 오름차순 정렬한 후 상위 6개만 추출
mtcars %>%
arrange(-wt) %>%
head(6)
## 정렬: arrange(데이터, 변수명1, 변수명2 ...), arrange(데이터, desc(변수명))
### mtcars에서 무게(wt)를 기준으로 오름차순 정렬한 후 상위 6개만 추출
mtcars %>%
arrange(-wt) %>%
head()
## 정렬: arrange(데이터, 변수명1, 변수명2 ...), arrange(데이터, desc(변수명))
### mtcars에서 무게(wt)를 기준으로 오름차순 정렬한 후 상위 6개만 추출
mtcars %>%
arrange(wt) %>%
head()
arrange(desc(wt) %>%
## 정렬: arrange(데이터, 변수명1, 변수명2 ...), arrange(데이터, desc(변수명))
### mtcars에서 무게(wt)를 기준으로 오름차순 정렬한 후 상위 6개만 추출
mtcars %>%
arrange(desc(wt)) %>%
head()
## 정렬: arrange(데이터, 변수명1, 변수명2 ...), arrange(데이터, desc(변수명))
### mtcars에서 무게(wt)를 기준으로 오름차순 정렬한 후 상위 6개만 추출
mtcars %>%
## 정렬: arrange(데이터, 변수명1, 변수명2 ...), arrange(데이터, desc(변수명))
### mtcars에서 무게(wt)를 기준으로 내림차순 정렬한 후 상위 6개만 추출
mtcars %>%
arrange(wt, desc(wt)) %>%
head()
## 정렬: arrange(데이터, 변수명1, 변수명2 ...), arrange(데이터, desc(변수명))
### mtcars에서 무게(wt)를 기준으로 내림차순 정렬한 후 상위 6개만 추출
mtcars %>%
arrange(wt) %>%
head()
## 정렬: arrange(데이터, 변수명1, 변수명2 ...), arrange(데이터, desc(변수명))
### mtcars에서 무게(wt)를 기준으로 내림차순 정렬한 후 상위 6개만 추출
mtcars %>%
arrange(wt, desc) %>%
head()
## 정렬: arrange(데이터, 변수명1, 변수명2 ...), arrange(데이터, desc(변수명))
### mtcars에서 무게(wt)를 기준으로 내림차순 정렬한 후 상위 6개만 추출
mtcars %>%
arrange(-wt) %>%
head()
## 요약: summarise(데이터, 요약 변수명 = 기술 통계 함수)
### 자동차 실린더(cyl) 개수의 평균, 최소, 최대 추출
c_mt %>%
summarise(mn = mean(cyl),  mi = min(cyl), ma = max(cyl))
## 그룹설정: group_by(데이터, 변수명)
### 동일한 실린더 개수를 가진 차가 몇 대인지 추출
c_mt %>%
group_by(cyl) %>%
count(cyl)
mtcars %>%
gq <- group_by(cyl) %>%
summarise(gp, n())
mtcars %>%
gq <- group_by(cyl) %>%
summarise(gp, n())
mtcars %>%
gq <- group_by(cyl)
c_mt %>%
group_by(cyl) %>%
count(cyl)
mtcars %>%
group_by(cyl) %>%
count(cyl)
gq <- group_by(mtcars, cyl)
summarise(gq, n())
summarise(gq, n_distinct(gear))
# EDA(탐색적 데이터 분석)
tips <- read.csv('https://raw.githubusercontent.com/mwaskom/seaborn-data/master/tips.csv')
str(tips)
summarise(tips)
summarize(tips)
table(tips)
max(tips$total_bill , tips$tip)
max(c(tips$total_bill , tips$tip)
max(c(tips$total_bill , tips$tip))
max(c(tips$total_bill , tips$tip))
max(tips$total_bill)
table(tips$total_bill)
table(tips$tip)
min(tips$total_bill)
mean(tips$total_bill)
summary(tips)
# total_bill         tip           총 244명의 인원 다녀감
# Min.   : 3.07   Min.   : 1.000
# Mean   :19.79   Mean   : 2.998
# Max.   :50.81   Max.   :10.000
tips$sex <- as.factor(tips$sex)
tips$smoker <- as.factor(tips$smoker)
tips$day <- as.factor(tips$day)
tips$time <- as.factor(tips$time)
summary(tips)
tips %>%
group_by(day, time, sex)
tips %>%
group_by(day, time, sex) %>%
avarage()
group_by(tips, day, time, sex)
gb <- group_by(tips, day, time, sex)
mean(gb)
summarise(gb, n())
summarise(gb, mean())
summarise(mean(gb))
summarise(gb, mean(tips$tip))
summarise(gb, max(tips$tip))
gb <- group_by(tips, sex)
summarise(gb, max(tips$tip))
gb <- group_by(tips, sex)
summarise(gb, mean(tips$tip))
View(tips)
head(rank(tips$tip), 40)
head(arrange(tips$tip), 40)
head(arrange(tips, tip), 40)
head(arrange(tips, desc(tip)), 40)
# Croatia의 기대수명과 인구의 평균을 추출하시오.
apply(tips[, c('day', 'tips')], 2, mean)
summarise(group_by(tips, day), mean(tip))
summarise(group_by(tips, day, time), mean(tip)) # 일요일이 3.26으로 가장 높음
summarise(group_by(tips, sex, mean(tip))
summarise(group_by(tips, sex, mean(tip))
summarise(group_by(tips, sex), mean(tip))
summarise(group_by(tips, size), mean(tip))
# 동석자 수의 분포
tips %>%
ggplot(aes(size)) + geom_point()
# 동석자 수의 분포
tips %>%
ggplot(aes(size)) + geom_histogram()
# 총액에 따른 팁 액수 분석
tips %>%
ggplot(aes(total_bill, tip)) +geom_point()
# 총액에 따른 팁 액수 분석
tips %>%
ggplot(aes(total_bill, tip)) + geom_point(aes(col = day))
# 총액에 따른 팁 액수 분석
tips %>%
ggplot(aes(total_bill, tip)) + geom_point(aes(col = day, pch = sex))
# 총액에 따른 팁 액수 분석
tips %>%
ggplot(aes(total_bill, tip)) + geom_point(aes(col = day, pch = sex) size = 3)
# 총액에 따른 팁 액수 분석
tips %>%
ggplot(aes(total_bill, tip)) + geom_point(aes(col = day, pch = sex), size = 3)
rm(gb)
# 탐색적 데이터 분석: mpg
str(mpg)
mpg <- as.data.frame(ggplot2::mpg)
# 탐색적 데이터 분석: mpg
str(mpg)
## 자동차 배기량(displ)에 따라 고속도로 연비(hwy)
table(mpg$displ)
median(mpg$displ)
## 자동차의 제조회사별 도시 연비(cty)가 어떤지 분석
summarise(group_by(mtcars, manufacturer), mean(cty))
## 자동차의 제조회사별 도시 연비(cty)가 어떤지 분석
summarise(group_by(mpg, manufacturer), mean(cty))
## 자동차 배기량이 4 이하인 자동차와 5 이상인 자동차 중 어떤 자동차의 고속도로 연비가 높은지
summerise(group_by(mpg$displ <= 4 , mpg$displ >= 5), mean(hwy))
## 자동차 배기량이 4 이하인 자동차와 5 이상인 자동차 중 어떤 자동차의 고속도로 연비가 높은지
summarise(group_by(mpg$displ <= 4 , mpg$displ >= 5), mean(hwy))
## 자동차 배기량이 4 이하인 자동차와 5 이상인 자동차 중 어떤 자동차의 고속도로 연비가 높은지
filter(mpg, displ <= 4 & displ >= 5)
## 자동차 배기량이 4 이하인 자동차와 5 이상인 자동차 중 어떤 자동차의 고속도로 연비가 높은지
mpg %>%
filter(displ <= 4 & displ >= 5) %>%
select(mean(hwy))
## 자동차의 제조회사별 도시 연비(cty)가 어떤지 분석
summarise(group_by(mpg, manufacturer), mean(cty))
d4 <- filter(mpg, displ <= 4)
d5 <- filter(mpg, displ >= 5)
mean(d4)
mean(d5)
mean(d4$hwy)
mean(d5$hwy)
## 자동차의 제조회사별 도시 연비(cty)가 어떤지 분석
summarise(group_by(mpg, manufacturer), mean(cty))
apply(mpg[mpg$displ, 'hwy'], 2, mean)
apply(mpg[mpg$displ, 'hwy'], 1, mean)
apply(mpg[mpg$displ, hwy], 1, mean)
apply(mpg[mpg$displ, mpg$hwy], 1, mean)
tips %>%
ggplot(aes(day, tip)) + geom_point(aes(col = time, pch = sex), size = 3)
tips %>%
ggplot(aes(day, tip)) + geom_bar(col = time)
tips %>%
ggplot(aes(day, tip)) + geom_bar(aes(col = time))
geom_bar
? geom_bar
tips %>%
ggplot(aes(day, tip)) + geom_bar()
tips %>%
ggplot(aes(day, tip)) + geom_bar(stat = "identity")
tips %>%
ggplot(aes(day, tip, fill = time)) + geom_bar(stat = "identity")
tips %>%
ggplot(aes(day, tip, fill = time)) + geom_bar(stat = "identity", position = fill)
tips %>%
ggplot(aes(day, tip, fill = time)) + geom_bar(stat = "identity", position = 'fill')
tot <- sum(tips$total_bill)
tot <- sum(tips$total_bill , tips$tip)
tot <- add(tips$total_bill , tips$tip)
tot <- tips$total_bill + tips$tip
tips %>%
ggplot(aes(day, tot, fill = time)) + geom_bar(stat = "identity", position = 'dodge') + geom_line(aes(tip))
c_tips <-tips
rm(c_tips)
filter(mpg, displ)

mtcars %>% mutate(mpg_rank = rank(mpg)) %>% arrange(mpg_rank)
library(readxl)
raw < - read_excel('C:/k_digital/r/source/Day005/Sample1.exel')
raw < - read_excel('C:/k_digital/r/source/Day005/Sample1.xlsx')
raw < - read_excel('C:/k_digital/r/source/Day005/Sample1.xlsx')
raw <- read_excel('C:/k_digital/r/source/Day005/Sample1.xlsx')
# 데이터 사본 생성
data <- raw
View(data)
## id만 추출
data$ID
## id, area, age 추출
data[, c(ID, AREA, AGE)]
## id, area, age 추출
data[, c('ID', 'AREA', 'AGE')]
## area를 제외하고 추출
data[, -'ID']
## area를 제외하고 추출
data[, -1]
## area가 서울인 자료만 추출
data[, 'area'== 'seoul']
## area가 서울인 자료만 추출
filter(data, 'area'== 'seoul')
str(data)
## area가 서울인 자료만 추출
a <- filter(data, 'area'== 'seoul')
a
rm(a)
dataf <- data
dataf <- as.data.frame(data)
## area가 서울인 자료만 추출
filter(dataf, 'area'== 'seoul')
## area가 서울인 자료만 추출
select(dataf, 'area'== 'seoul')
## area가 서울인 자료만 추출
filter(dataf, area == 'seoul')
## area가 서울인 자료만 추출
filter(dataf, 4 == 'seoul')
## area가 서울인 자료만 추출
filter(dataf, AREA == '서울')
## area가 서울인 자료만 추출
filter(data, AREA == '서울')
## area가 서울이면서 Y21_CNT 거래 건수가 10 이상인 자료만 추출
filter(data, AREA == '서울' & Y21_AMT >= 10)
## area가 서울이면서 Y21_CNT 거래 건수가 10 이상인 자료만 추출
filter(data, AREA == '서울' & Y21CNT >= 10)
## area가 서울이면서 Y21_CNT 거래 건수가 10 이상인 자료만 추출
filter(data, AREA == '서울' & Y21_CNT >= 10)
## age를 기준으로 오름차순 정렬
arrange(data, age)
## age를 기준으로 오름차순 정렬
arrange(data, AGE)
## Y21_AMT를 기준으로 내림차순 정렬
arrange(data, desc(Y21_AMT))
## age 오름차순, Y21_AMT는 내림차순 정렬
arrange(data, AGE, desc(Y21_AMT))
## 지역별 21년도 이용금액의 합계 추출
summarise(group_by(AREA), area_sum = sum(Y21_AMT))
## 지역별 21년도 이용금액의 합계 추출
summarise(group_by(data$AREA), area_sum = sum(Y21_AMT))
## 지역별 21년도 이용금액의 합계 추출
summarise(group_by(data, AREA), area_sum = sum(Y21_AMT))
## 21년도 이용금액(Y21_AMT)의 합산 결과(tot_21) 추출
summarise(tot_21 = sum(Y21_AMT))
## 21년도 이용금액(Y21_AMT)의 합산 결과(tot_21) 추출
summarise(tot_21 = sum(data$Y21_AMT))
## 21년도 이용금액(Y21_AMT)의 합산 결과(tot_21) 추출
mutate(data, tot_21 = sum(Y21_AMT))
## 21년도 이용금액(Y21_AMT)의 합산 결과(tot_21) 추출
mutate(dataf, tot_21 = sum(Y21_AMT))
## 21년도 이용금액(Y21_AMT)의 합산 결과(tot_21) 추출
summarise(data, tot_21 = sum(Y21_AMT))
select(data, ID)
select(data, ID, AREA, AGE)
select(data, -ID)
rm(dataf)
## 수치형 자료를 분석하는 작업: 기술 통계량
x <- c(64, 84, 82, 81, 68, 85, 76, 89, 93, 77, 66, 64, 86, 74, 64, 7., 53, 98, 59, 79, 57, 59, 65, 67, 80)
### 평균
mean(x)
## 수치형 자료를 분석하는 작업: 기술 통계량
x <- c(64, 84, 82, 81, 68, 85, 76, 89, 93, 77, 66, 64, 86, 74, 64, 84, 70, 53, 98, 59, 79, 57, 59, 65, 67, 80)
### 평균
mean(x)
## 수치형 자료를 분석하는 작업: 기술 통계량
x <- c(64, 84, 82, 81, 68, 85, 76, 89, 93, 77, 66, 64, 86, 74, 64, 70, 53, 98, 59, 79, 57, 59, 65, 67, 80)
### 평균
mean(x)
### 중앙값
median(x)
### 최소값, 최대값
min(x)
max(X)
max(x)
storeA <- c(20, 21, 23, 22, 26, 28, 35, 35, 41, 42, 43, 45, 44, 45, 46, 47, 47, 46, 47, 58, 58, 59, 60, 56, 57, 57, 80)
storeB <- c(5, 6, 11, 13, 15, 16, 20, 20, 21, 23, 22, 27, 27, 30, 30, 32, 36, 37, 37, 40 ,40 ,43, 44, 45, 51, 54, 70, 600)
storeC <- c(5, 5, 5, 12, 10, 11, 20, 20, 20, 20, 20, 21, 20, 30, 32, 31, 31, 31, 36, 40, 40, 51, 61, 51, 61, 70)
mean(storeA)
mean(storeB)
median(storeA)
median(storeB)
quantile(storeA)
quantile(storeB)
#   0%    25%    50%    75%   100%
# 5.00  20.00  30.00  40.75 600.00
# B 식당의 이상치를 제거한 후 배달시간
boxplot(storeB)
#   0%    25%    50%    75%   100%
# 5.00  20.00  30.00  40.75 600.00
# B 식당의 이상치를 제거한 후 배달시간
boxplot(storeA, storeB, names = c('A식당', 'B식당'))
# B 식당의 이상치를 제거한 후 배달시간
storeB <- storeB[store < 600]
#   0%    25%    50%    75%   100%
# 5.00  20.00  30.00  40.75 600.00
# boxplot()
boxplot(storeA, storeB, names = c('A식당', 'B식당'))
# B 식당의 이상치를 제거한 후 배달시간
storeB <- storeB[store < 600]
# B 식당의 이상치를 제거한 후 배달시간
storeB <- storeB[storeB < 600]
#   0%    25%    50%    75%   100%
# 5.00  20.00  30.00  40.75 600.00
# boxplot()
boxplot(storeA, storeB, names = c('A식당', 'B식당'))
boxplot(storeA, storeB, names = c('A식당', 'B식당'))
points(c(mean(storeA), mean(storeB)), pch = 2, col = 'red', cex = 2)
mean(storeC)
storeC <- c(5, 5, 5, 12, 10, 11, 20, 20, 20, 20, 20, 21, 20, 30, 32, 31, 31, 31, 36, 40, 40, 51, 61, 51, 61, 61, 70)
mean(storeC)
quantile(storeC)
# 0%  25%  50%  75% 100%
# 5   20   30   40   70
boxplot(storeB, storC, names = c('B식당', 'C식당'))
# 0%  25%  50%  75% 100%
# 5   20   30   40   70
boxplot(storeB, storeC, names = c('B식당', 'C식당'))
hist(storeB, main = 'B식당 배달시간', xlab = '배달 시간 구간', ylab = '배달 건수')
hist(storeC, main = 'C식당 배달시간', xlab = '배달 시간 구간', ylab = '배달 건수')
# 분산과 표준편차
# 첨도와 왜도
var(storeB)
var(storeC)
sd(storeB)
sd(storeC)
# 범주형 데이터 분석: 파이차트, 막대그래프
blood.type <- c('A', 'B', 'A', 'AB', 'O', 'A', 'O', 'B', 'A', 'O', 'O', 'B', 'O', 'A', 'AB', 'B', 'O', 'A', 'A', 'B')
# 범주형 데이터 분석: 파이차트, 막대그래프
bloodtype <- c('A', 'B', 'A', 'AB', 'O', 'A', 'O', 'B', 'A', 'O', 'O', 'B', 'O', 'A', 'AB', 'B', 'O', 'A', 'A', 'B')
table(bloodtype)
length(bloodtype)
rm(blood.type)
# pie(데이터, 범주명, col, lty, main) # 파이차트를 그리려면 도수분포표값이 필요함 #
pie(table(bloodtype))
# pie(데이터, 범주명, col, lty, main) # 파이차트를 그리려면 도수분포표값이 필요함 #
pie(table(bloodtype), labels = c('A형', 'AB형', 'B형', 'O형'))
# pie(데이터, 범주명, col, lty, main) # 파이차트를 그리려면 도수분포표값이 필요함 #
pie(table(bloodtype), labels = c('A형', 'AB형', 'B형', 'O형'), col = c('cream', 'yellow', 'white', 'gray'), lty = 2, main = '우리반 혈액형 분포도')
# pie(데이터, 범주명, col, lty, main) # 파이차트를 그리려면 도수분포표값이 필요함 #
pie(table(bloodtype), labels = c('A형', 'AB형', 'B형', 'O형'), col = c('magenta', 'yellow', 'white', 'gray'), lty = 2, main = '우리반 혈액형 분포도')
tb <- addmargins(table(bloodtype))
# pie(데이터, 범주명, col, lty, main) # 파이차트를 그리려면 도수분포표값이 필요함 #
pie(table(bloodtype), labels = c('A형', 'AB형', 'B형', 'O형'), col = c('lightcyan', 'yellow', 'white', 'gray'), lty = 2, main = '우리반 혈액형 분포도')
# pie(데이터, 범주명, col, lty, main) # 파이차트를 그리려면 도수분포표값이 필요함 #
pie(table(bloodtype), labels = c('A형', 'AB형', 'B형', 'O형'), col = c('lightcyan', 'yellow', 'white', 'lightgray'), lty = 2, main = '우리반 혈액형 분포도')
# pie(데이터, 범주명, col, lty, main) # 파이차트를 그리려면 도수분포표값이 필요함 #
pie(table(bloodtype), labels = c('A형', 'AB형', 'B형', 'O형'), col = c('lightcyan', 'lightyellow', 'white', 'lightgray'), lty = 2, main = '우리반 혈액형 분포도')
tb <- addmargins(table(bloodtype))
# 막대차트 barplot(height, names.arg, space, horiz = T/F, main, xlab, ylab, col, beside, xlim, ylim)
barplot(table(bloodtype))
barplot(table(bloodtype),
names.arg = c('A형', 'AB형', 'B형', 'O형'),
main = '우리반 혈액형 분포도',
xlab = '혈액형',
ylab = '학생 수',
col = heat.colors(4))
names <- c('aaa', 'bbb', 'ccc', 'ddd', 'eee', 'fff', 'ggg', 'hhh', 'iii', 'jjj', 'kkk', 'lll', 'mmm', 'nnn', 'ooo', 'ppp', 'qqq', 'rrr', 'sss', 'ttt')
sex <- c('남', '여', '남', '남', '남', '여', '여', '남', '여', '여', '여', '여', '남', '여', '여', '남', '남', '남', '여', '남')
classDF <- data.frame(naem = names, gender = sex, blood = bloodtype)
classDF
table(classDF[, -1])
addmargins(table(classDF[, -1]))
classTable <- table(classDF[, -1])
barplot(classTable)
barplot(classTable, legend = T)
barplot(classTable, legend = T, ylim = c(0, 8))
barplot(classTable, legend = T, ylim = c(0, 8), col = heat.colors(2))
barplot(classTable, legend = T, ylim = c(0, 8), col = heat.colors(2), beside = T)
library(MASS)
?survey
head(survey)
str(survey)
survey <- survey[, c('Sex', 'Exer', 'Smoke')]
head(survey)
table(survey$Sex)
table(survey$Exer)
table(survey$Smoke)
xtabs(~Sex, survey)
# 교차표: 둘 이상의 범주형 데이터를 이용해서 빈도와 비율 확인
table(Sex = survey$Sex, Smoke = survey$Smoke)
xtabs(~Sex + Smoke, survey)
pie(table(survey$Smoke))
# 학원을 다니기 전 성적
before_study <- c(34, 76, 76, 63, 73, 75, 67, 78, 81, 53, 58, 81, 77, 80, 43, 65, 76, 63, 54, 64, 85, 54, 70, 71, 71, 55, 40, 78, 76, 100, 51, 93, 64, 42, 63, 61, 82, 67, 98, 59, 63, 84, 50, 67, 80, 83, 66, 86, 57, 48)
# 학원을 다닌 후 성적
after_study <- c(74, 87, 89, 98, 65, 82, 70, 70, 70, 84, 56, 76, 72, 69, 73, 61, 83, 82, 89, 75, 48, 72, 80, 66, 82, 71, 49, 54, 70, 65, 74, 63, 65, 101, 82, 75, 62, 83, 90, 76, 87, 90, 78, 63, 59, 79, 74, 65, 77, 74)
# boxplot() 비교
boxplot(before_study, after_study, names = c('수강 전', '수강 후'))
# t-검정: 집단간의 차이를 검증하는 도구, t.test()
## t.test(x, y, paired = T/F, var.equal = T/F, alternative = 양측검정, 단측검정)
### paired = T 대응표본, 한 집단으로부터 두 번 반복해 샘플을 추출하는 것
### paired = F 독립표본, 서로 독립된 집단에서 각 샘플을 추출하는 것
### alternative = 'two.sided' 두 집단이 서로 같은지 비교
### alternative = 'less', A less than B, A가 B보다 작은지 비교
### alternative = 'greater' A greater than B, A가 B보다 큰지 비교
## 반드시 선행되어야 하는 가정 - 정규분포
# 샘플이 30개 미만이면 정규분포 여부를 반드시 확인해야 한다. length()로 표본수 확인하면 좋음
# 동일집단을 대상으로 하는 대응표본
t.test(before_study, after_study, paired = T)
t.test(before_study, after_study, paired = T, alternative = 'greater')
## 표본이 30개 미만으로 정규분포 여부 확인: Shapiro-wilk 검정
### 귀무가설: 정규분포를 따른다
### 대립가설: 정규분포를 따르지 않는다
shapiro.test(a)
# 표본이 1개인 경우, 단일 표본 t 검정
## A회사의 건전지 수명시간이 1,000시간일 때
## 귀무가설: 건전지 수명은 1,000시간이다
## 대립가설: 건전지 수명은 1,000시간이 아니다
a <- c(980, 1003, 963, 1032, 1012, 1002, 996, 1102, 1017, 1003)
## 표본이 30개 미만으로 정규분포 여부 확인: Shapiro-wilk 검정
### 귀무가설: 정규분포를 따른다
### 대립가설: 정규분포를 따르지 않는다
shapiro.test(a)
# 수학 평균점수가 55점이다
# 0교시 실행후 학생들의 성적이 올랐다고 할 수 있는지
## 귀무가설: 오르지 않았다
## 대립가설: 성적이 올랐다
score <- c(58, 49, 39, 99, 32, 88, 62, 30, 55, 65, 44, 55, 57, 53, 33, 42, 39)
# p-value = 0.0502 p값이 0.05보다 크므로 귀무가설 채택
## alternative = 'two.sided', 주어진 샘플이 평균과 다르다
## alternative = 'less', 샘플이 주어진 평균보다 작다
## alternative = 'greater', 샘플이 주어진 평균보다 크다
t.test(a,mu = 1000, alternative = 'two.sided')
fisher.test(score)
shapiro.test(score)
# p-value = 0.06308
t.test(score, ma = 55, alternative = 'two.sided')
# 정수기 회사 직원 채용 분석 - AS기사 채용 수요 분석
purifier_df <- read.table(file = 'clipboard', header =T, sep = '\t', stringsAsFactors = T)
str(purifier_df)
# 상관관계: 총 정수기 대여 수와 AS 시간의 상관관계
plot(purifier_df$old_purifier, purifier_df$as_time)
# 상관관계: 총 정수기 대여 수와 AS 시간의 상관관계
plot(purifier_df$old_purifier, purifier_df$as_time, xlab = '총 정수기 대여 수', ylab = 'AS 시간')
# 상관관계: 총 정수기 대여 수와 AS 시간의 상관관계
plot(purifier_df$purifier, purifier_df$as_time, xlab = '총 정수기 대여 수', ylab = 'AS 시간')
# 상관관계: 10년 이상 노후된 정수기의 대여 수와 AS 시간의 상관관계
purifier_df &>& plot(old_purifier, as_time, xlab = '노후 정수기 대수여' , ylab = 'AS 시간')
# 상관관계: 10년 이상 노후된 정수기의 대여 수와 AS 시간의 상관관계
purifier_df %>% plot(old_purifier, as_time, xlab = '노후 정수기 대수여' , ylab = 'AS 시간')
# 상관관계: 10년 이상 노후된 정수기의 대여 수와 AS 시간의 상관관계
purifier_df %>% plot(old_purifier, as_time, xlab = '노후 정수기 대수여' , ylab = 'AS 시간')
# 상관관계: 10년 이상 노후된 정수기의 대여 수와 AS 시간의 상관관계
purifier_df >%> plot(old_purifier, as_time, xlab = '노후 정수기 대수여' , ylab = 'AS 시간')
# 상관관계: 10년 이상 노후된 정수기의 대여 수와 AS 시간의 상관관계
purifier_df %>% plot(old_purifier, as_time, xlab = '노후 정수기 대수여' , ylab = 'AS 시간')
# 상관관계: 10년 이상 노후된 정수기의 대여 수와 AS 시간의 상관관계
plot(purifier_df$old_purifier, purifier_df$as_time, xlab = '노후 정수기 대수여' , ylab = 'AS 시간')
# 상관계수: 피어슨 상관계수, 스피어만 상관계수
cor(purifier_df$purifier, purifier_df$as_time, method = 'spearman') # method 생략하면 기본이 피어슨#
# 상관계수: 피어슨 상관계수, 스피어만 상관계수
cor(purifier_df$purifier, purifier_df$as_time) # method 생략하면 기본이 피어슨#
# 피어슨 [1] 0.9102497 스피어만 [1] 0.8653226
cor(purifier_df$old_purifier, purifier_df$as_time)
# 피어슨 [1] 0.9102497 스피어만 [1] 0.8653226
cor(purifier_df$old_purifier, purifier_df$as_time, method = 'spearman')
x <- c(70, 72, 62, 64, 71, 76, 0, 65, 74, 72)
y <- c(70, 74, 65, 68, 72, 74, 61, 66, 76, 75)
cor.test(x, y, method = 'pearson')
# R base 내장 데이터 women
str(women)
plot(women$height, women$weight)
# 상관계수
cor(women$height, women$weight)
# 회귀분석: 독립변수와 종속변수
# 체중 = 기울기 * 신장 + 절편
# 종속변수 ~ 독립변수
model <- lm(women$weight ~ women$height)
model
3.45 * 180 - 87.52
summary(modle)
summary(model)
# 회귀선
plot(women$height, women$weight) + abline(model)
View(women)
0.453592 * 100
533.4833 /  0.453592
0.453592 / 533.4833
# 자동차의 속도와 제동거리 데이터 셋
str(cars)
plot(cars$speed, cars$dist)
data()
?women
cor(cars$speed, cars$dist)
head(cars, 10)
# 차 속도에 따른 제동거리를 확인하는 회귀분석
model <- lm(dist ~ speed, cars)
model
# (Intercept)        speed  # 기울기 -17.579 절편 3.932
# -17.579        3.932
summary(model)
# 예측 모델의 정확성  64% 정도 Adjusted R-squared:  0.6438 # p값 0.05 보다 작음 p-value: 1.49e-12
# 회귀방정식
## 제도어리 = 3.9324 * speed -17.5791
abline(model)
## 가로 2 * 세로 2
par(mfrow = c(2, 2))
plot(model)
# 독립변수에 여러 값을 담아 예측
speed <- c(50, 60, 70, 80, 90, 100)
new_input <- data.frame(speed)
## 예측 - 점 추정
predict(model, new_input)
result <- predict(model, new_input)
str(result)
cbind(new_input, result)
# 예측 - 구간 측정
## interval = 'confidence' 모델 계수의 불확실성을 감안한 구간 추정
## interval = 'prediction' 모델 계수의 불확실성과 결과의 오차를 감안한 구간추정
result <- predict(model, new_input, interval = 'confidence' level = 0.95)
# 예측 - 구간 측정
## interval = 'confidence' 모델 계수의 불확실성을 감안한 구간 추정
## interval = 'prediction' 모델 계수의 불확실성과 결과의 오차를 감안한 구간추정
result <- predict(model, new_input, interval = 'confidence', level = 0.95)
result
# 수치데이터의 기초 통계량
summary <- (purifier_df)
## 독립변수: 정수기 총 대여 수, 노후된 정수기 총 대여 수
## 종속변수: AS 시간
## 정수기 총 대여수 = 10 이전 대여 수 + 10 이후 대여 수
## 파생변수 young_purifier
purifier_df$y_purifier <- purifier_df$purifier - purifier_df$old_purifier
purifier_df
lm_result <-lm(as_time ~ y_purifier + old_purifier, purifier_df)
summary(lm_result)
lm_result
input_predict <- data.frame(y_purifier = 230000, old_purifier = 70000)
result <- predict(lm_result, input_predict)
result
# 1
# 37403.09
# AS기사 1명이 한 달간 처리하는 AS 시간 : 8시간 * 20일 160시간
result / (8 * 20)
# 구간추정
result <- predict(lm_result, input_predict, interval = 'confidence', level = 0.95)
result
library(stringr)
v <- c('A', 'B', 'C')
str_c(v, '_1')
paste(v, '_1')
paste0(v, '_1')
paste(v, '1')
paste(v, '1', seq = '_')
paste(v, '1', sep = '_')
str_c(v, '1', sep = '_')
# Character 개수 카운트
## nchar(x)
## str_length(x)
s <- "Hello"
ncahr(s)
nchra(s)
nchar(s)
str_length(s)
# 소문자 변환
## tolower(x)
tolower(s)
# 대문자 변환
##toupper()
toupper(s)
x <- c('hello', 'world', 'r', 'program')
y <- c('hi', 'world', 'r', 'coding')
union(x, y)
## intersect(x, y) 교집합
intersect(x, y)
# setdiff(x, y) 차집합, 공통되지 않는 값만 추출
setdiff(x, y)
# setdiff(x, y) 차집합, 공통되지 않는 값만 추출
setdiff(y, x)
## setequal(x, y)
setequal(x, y)
## 문자 공백 제거: trim
### str_trim(x, side = 'both'나 'left'나 'right')
s2 <- c("     Hellow World     ", "          Hi R           ")
str_trim(s2)
str_trim(s2, side = left)
str_trim(s2, side = 'left')
str_trim(s2, side = 'right')
rep(1:3, times = 2, each = 3)
## String 반복해서 추출
### rep(x, times, each, length.out)
rep(1:3, times = 2)
# [1] 1 1 1 2 2 2 3 3 3 1 1 1 2 2 2 3 3 3
rep(1:3, times = 2, each = 3, len = 4)
# [1] 1 1 1 2
rep('Hello', 3)
### str_dup(x, times)
str(str_dup(1:3, times =2))
str_dup('Hello', 3)
substr(s3, 7, 9)
# 문자열 일부분 추출
## substr(x, start, stop)
s3 <- 'Hello world!'
substr(s3, 7, 9)
string <- 'Today is Sunday'
substr(string, 10, 12)
substring(string, 10, 12)
# 함수(Function)
## 함수명 <- function(매개변수){함수 몸체}
fibo <- function(n){
if(n %% 2 == 0){
print("짝수")
}else
print("홀수")
}
fibo(1:2)
fibo(2)
fibo(1)
# plot => qplot => ggplot
library(ggolot)
# plot => qplot => ggplot
library(ggolot2)
# plot => qplot => ggplot
library(ggplot2)
barplot(mpg$hwy)
qplot(hwy, mpg)
install.packages('mlbench')
library(mlbench)
? Ozone
data(Ozone)
str(Ozone)
plot(Ozone$V8, Ozone$V9)
plot(Ozone$V8, Ozone$V9,
xlab = 'Sandburg Temp', ylab = 'El Monte Temp')
plot(Ozone$V8, Ozone$V9,
xlab = 'Sandburg Temp', ylab = 'El Monte Temp',
main = 'Ozone')
plot(Ozone$V8, Ozone$V9,
xlab = 'Sandburg Temp', ylab = 'El Monte Temp', # 축 제목
main = 'Ozone', # 차트 제목
pch = 20)
plot(Ozone$V8, Ozone$V9,
xlab = 'Sandburg Temp', ylab = 'El Monte Temp', # 축 제목
main = 'Ozone', # 차트 제목
pch = '*')
plot(Ozone$V8, Ozone$V9,
xlab = 'Sandburg Temp', ylab = 'El Monte Temp', # 축 제목
main = 'Ozone', # 차트 제목
pch = 20,
cex = 1.5)
plot(Ozone$V8, Ozone$V9,
xlab = 'Sandburg Temp', ylab = 'El Monte Temp', # 축 제목
main = 'Ozone', # 차트 제목
pch = 20, # 점의 종류
cex = 1.5, # 점의 크기
col = '#ffff00')
plot(Ozone$V8, Ozone$V9,
xlab = 'Sandburg Temp', ylab = 'El Monte Temp', # 축 제목
main = 'Ozone', # 차트 제목
pch = 20, # 점의 종류
cex = 1.5, # 점의 크기
col = '#ff0f00')
plot(Ozone$V8, Ozone$V9,
xlab = 'Sandburg Temp', ylab = 'El Monte Temp', # 축 제목
main = 'Ozone', # 차트 제목
pch = 20, # 점의 종류
cex = 1.5, # 점의 크기
col = '#ff0ff0')
plot(Ozone$V8, Ozone$V9,
xlab = 'Sandburg Temp', ylab = 'El Monte Temp', # 축 제목
main = 'Ozone', # 차트 제목
pch = 20, # 점의 종류
cex = 1.5, # 점의 크기
col = '#ff0fff')
plot(Ozone$V8, Ozone$V9,
xlab = 'Sandburg Temp', ylab = 'El Monte Temp', # 축 제목
main = 'Ozone', # 차트 제목
pch = 20, # 점의 종류
cex = 1.5, # 점의 크기
col = '#ff00ff')
plot(Ozone$V8, Ozone$V9,
xlab = 'Sandburg Temp', ylab = 'El Monte Temp', # 축 제목
main = 'Ozone', # 차트 제목
pch = 20, # 점의 종류
cex = 1.5, # 점의 크기
col = '#0000ff')
plot(Ozone$V8, Ozone$V9,
xlab = 'Sandburg Temp', ylab = 'El Monte Temp', # 축 제목
main = 'Ozone', # 차트 제목
pch = 20, # 점의 종류
cex = 1.5, # 점의 크기
col = '#0f00ff')
# 축값 범위(xlim, ylim) xlim =  c(최소값, 최대값)
max(Ozone$V8, na.rm = T)
max(Ozone$V9)
max(Ozone$V9, na.rm = T)
plot(Ozone$V8, Ozone$V9,
xlab = 'Sandburg Temp', ylab = 'El Monte Temp', # 축 제목
main = 'Ozone', # 차트 제목
pch = 20, # 점의 종류
cex = 1.5, # 점의 크기
col = '#0f00ff',# 색상
xlim = c(0, 100), ylim = c(0,90))

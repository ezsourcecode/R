# 필요 라이브러리 로딩
library(readxl)
library(dplyr)
raw <- read_excel('C:/k_digital/data/Cafe_Sales.xlsx',col_names = T)
# 데이터 프레임으로 변형
cafe <- as.data.frame(raw)
str(cafe)
head(cafe)
class(cafe$order_date)
x <- Sys.time()
format(x, '%Y-%m-%d %H:%M:%S')
format(x, '%Y-%j %H:%M:%s')
format(x, '%G-%V-%u %H:%M:%S')
is.na(NROW(cafe))
count(is.na(NROW(cafe)))
count(NROW(is.na(cafe)))
table(is.na(cafe$order_id))
table(is.na(cafe$order_date))
table(is.na(cafe$category))
table(is.na(cafe$item))
table(is.na(cafe$price))
## 전체 데이터수에 비해 결측치가 적으면 대체보다는 제거
cafe <- na.omit(cafe)
# 결측치와 이상치 분석
table(is.na(cafe$order_id))
table(is.na(cafe$order_date)) # 이 열만 결측치가 있음
# FALSE  TRUE
# 62410   171
table(is.na(cafe$category))
table(is.na(cafe$item))
nrow(cafe)
unique(cafe$order_id)
# 주문 건수
length(unique(cafe$order_id))
count(unique(cafe$order_id))
count(unique(cafe$order_date))
length(unique(cafe$order_date))
# 주문 건수
length(unique(cafe$order_id & cafe$order_date)) # [1] 34875
# 카페에서 가장 많이 판매된 메뉴
## 내림차순 정렬
sort(table(cafe$item), decreasing = T)
cafe_item <- data.frame(table(cafe$item))
head(cafe_item)
sales_item <- subset.data.frame(cafe, select = c('item', 'price'))
head(sales_item)
sales_item <-unique(sales_item)
head(sales_item)
sales_item
# 요일별 판매한 메뉴는 무엇인가
## 요일을 담는 파생변수 생성
cafe$weekday <- weekdays(cafe$order_date)
head(cafe)
table(cafe$weekday)
date_info <- data.frame(weekday = c('월요일', '화요일', '수요일', '목요일', '금요일', '토요일', '일요일'), day = c('평일', '평일', '평일', '평일', '평일', '주말', '주말'))
## 두 개의 데이터 프레임 병합
cafe <- merge(cafe, date_info) # 동명의 컬럼이 있으므로 조건 생략
head(cafe)
table(cafe$day)
# 계절별로 판매되는 메뉴는 무엇인가
cafe$month <- months(cafe$order_id)
# 계절별로 판매되는 메뉴는 무엇인가
cafe$month <- months(cafe$order_date)
head(cafe)
## 봄(3 ~ 5), 여름(6 ~ 8), 가을(9 ~ 11), 겨울(12 ~ 2)
## 파생변수 season
seasons <- data.frame(month = c('3월', '4월', '5월', '6월', '7월', '8월', '9월', '10월', '11월', '12월', '1월', '2월'), seoson = c('봄', '봄', '봄', '여름', '여름', '여름', '가을', '가을', '가을', '겨울', '겨울', '겨울'))
cafe <- merge(cafe, seasons)
head(cafe)
table(cafe$seoson, cafe$item)
df.rename(columns={'seoson':'season'})
cafe <- rename(cafe, 'seoson' = 'season')
# 매출현황 시각화
## 카테고리별 판매 건수 시각화
summary(cafe$category)
# 매출현황 시각화
## 카테고리별 판매 건수 시각화
category_n <- cafe %>%
group_by(category)
category_n <- cafe %>%
group_by(category) %>%
summarise(count = n_distinct())
# 매출현황 시각화
## 카테고리별 판매 건수 시각화
category_n <- unique(cafe$category)
library(ggplot2)
## 월별 판매 건수 시각화
## 요일별 판매 건수 시각화
ggplot(cafe, aes(x = day)) +geom_bar()
## 월별 판매 건수 시각화
## 요일별 판매 건수 시각화
ggplot(cafe, aes(x = weekday)) +geom_bar()
## 월별 판매 건수 시각화
## 요일별 판매 건수 시각화
ggplot(cafe, aes(x = day)) +geom_bar(weakday)
## 월별 판매 건수 시각화
## 요일별 판매 건수 시각화
ggplot(cafe, aes(x = day)) +geom_bar(weekday)
## 월별 판매 건수 시각화
## 요일별 판매 건수 시각화
ggplot(cafe, aes(x = day)) +geom_bar(col = 'weekday')
# 매출현황 시각화
## 카테고리별 판매 건수 시각화
cafe %>%
group_by(category) %>%
summarise(count = n())
cafe %>%
group_by(month, category) %>%
summarise(count = n())
cafe %>%
group_by(month) %>%
summarise(count = n())
## 요일별 판매 건수 시각화
ggplot(cafe, aes(x = day)) + geom_bar(fill = as.factor(weekday))
## 요일별 판매 건수 시각화
ggplot(cafe, aes(x = day)) + geom_bar(fill = as.factor(cafe$weekday))
cafe %>%
group_by(weekday) %>%
summarise(count = n())
ggplot(cafe, aes(x = day)) + geom_bar(aes(fill = as.factor(cafe$weekday)))
ggplot(cafe, aes(x = day)) + geom_bar(aes(fill = as.factor(weekday)))
ggplot(cafe, aes(x = day)) + geom_bar(aes(fill = as.factor(weekday)), position = 'dodge')
ggplot(cafe, aes(x = seoson)) + geom_bar(aes(fill = as.factor(month)), position = 'dodge')
ggplot(cafe, aes(x = category)) +geom_bar()
ggplot(cafe, aes(x = category)) +geom_bar(aes(fill = as.factor(item)), position = 'dodge')
cafe %>%
group_by(month) %>%
summarise(count = n())
ggplot(cafe, aes(x = seoson)) + geom_bar(aes(fill = as.factor(month)), position = 'dodge') +
scale_x_discrete(limits = c('봄', '여름', '가을', '겨울'))
ggplot(cafe, aes(x = day)) + geom_bar(aes(fill = as.factor(weekday)), position = 'dodge') +
scale_x_discrete(limits = c('월요일', '화요일', '수요일', '목요일', '금요일', '토요일', '일요일'))
ggplot(cafe, aes(x = day)) + geom_bar(aes(fill = as.factor(weekday)), position = 'dodge')
ggplot(cafe, aes(x = day)) + geom_bar(aes(fill = as.factor(weekday)), position = 'dodge') +
scale_x_discrete(limits = c('월요일', '화요일', '수요일', '목요일', '금요일', '토요일', '일요일')) + geom_label(ase = weekday)
ggplot(cafe, aes(x = day)) + geom_bar(aes(fill = as.factor(weekday)), position = 'dodge') +
scale_x_discrete(limits = c('월요일', '화요일', '수요일', '목요일', '금요일', '토요일', '일요일')) + geom_label(ase = weekday)
ggplot(cafe, aes(x = day)) + geom_bar(aes(fill = as.factor(weekday)), position = 'dodge') +
scale_x_discrete(limits = c('월요일', '화요일', '수요일', '목요일', '금요일', '토요일', '일요일')) + geom_label(weekday)
ggplot(cafe, aes(x = day)) + geom_bar(aes(fill = as.factor(weekday)), position = 'dodge') +
scale_x_discrete(limits = c('월요일', '화요일', '수요일', '목요일', '금요일', '토요일', '일요일')) + geom_label(aes(label = weekday))
ggplot(cafe, aes(x = day)) + geom_bar(aes(fill = as.factor(weekday)), position = 'dodge') +
scale_x_discrete(limits = c('월요일', '화요일', '수요일', '목요일', '금요일', '토요일', '일요일')) + geom_label(aes(label = as.factor(weekday)))
ggplot(cafe, aes(x = day)) + geom_bar(aes(fill = as.factor(weekday)), position = 'dodge') +
scale_x_discrete(limits = c('월요일', '화요일', '수요일', '목요일', '금요일', '토요일', '일요일')) + geom_label(aes(label = count(weekday)))
ggplot(cafe, aes(x = day)) + geom_bar(aes(fill = as.factor(weekday)), position = 'dodge') +
scale_x_discrete(limits = c('월요일', '화요일', '수요일', '목요일', '금요일', '토요일', '일요일')) + geom_label()
ggplot(cafe, aes(x = day)) + geom_bar(aes(fill = as.factor(weekday)), position = 'dodge') +
scale_x_discrete(limits = c('월요일', '화요일', '수요일', '목요일', '금요일', '토요일', '일요일'))
ggplot(cafe, aes(x = day)) + geom_bar(aes(fill = as.factor(weekday)), position = 'dodge')
ggplot(cafe, aes(x = day)) + geom_bar(aes(fill = as.factor(weekday)), position = 'dodge') + geom_label()
ggplot(cafe, aes(x = day)) + geom_bar(aes(fill = as.factor(weekday)), position = 'dodge') + geom_label(n())
ggplot(cafe, aes(x = day)) + geom_bar(aes(fill = as.factor(weekday)), position = 'dodge') + geom_text(stat = 'count',  aes(label=..count..), position = position_dodge(width=1.8), vjust=-0.5)
ggplot(cafe, aes(x = day)) + geom_bar(aes(fill = as.factor(weekday)), position = 'dodge') + geom_text(stat = 'count',  aes(label=..count..), position = position_dodge(width=1.8))
ggplot(cafe, aes(x = day)) + geom_bar(aes(fill = as.factor(weekday)), position = 'dodge') + geom_text(stat = 'count',  aes(label=..count..), position = position_dodge(width=1.8), vjust= 0)
ggplot(cafe, aes(x = day)) + geom_bar(aes(fill = as.factor(weekday)), position = 'dodge') + geom_text(stat = 'count',  aes(label=..count..), position = position_dodge(width=1.8), vjust= -0.5)
# 별도의 기억장소에 저장된 패키지 설치 방법 - github
install.packages('devetools')
# 패키지 설치
devetools::install_github('kilhwan/bizstatp')
# 별도의 기억장소에 저장된 패키지 설치 방법 - github
install.packages('devtools')
# 패키지 설치
devetools::install_github('kilhwan/bizstatp')
# 패키지 설치
devtools::install_github('kilhwan/bizstatp')
# 패키지 로딩
library(bizstatp)
couse
course
course
# 데이터 확인
str(course)
# 데이터 전체 요약 보고서
summary(course)
# 변수들 간의 상관관계를 파악 - 산점도
plot(course)
plot(course[, -1:4])
plot(course[, -5:8])
plot(course[, 5:8])
# 범주형 변수의 기술통계
head(course)
# 절대빈도표 table(), xtabs()
## table(벡터) or table(데이터프레임$컬럼)
table(course$major)
xtabs(~year, course)
xtabs(~year, course, gender == 'M')
xtabs(~year, course, class == 2)
dataYear <- xtabs(~year, course)
dataMajor <- xtabs(~ major, course)
dataGender <- xtabs(~gender, course)
dataClass <- xtabs(~class, course)
## 상대빈도표를 만드는 함수: proportions(절대빈도표), prop.table
### 학년과 성별에 대한 상대 빈도표
proportions(dataYear)
# year
# 1          2          3          4
# 0.02222222 0.71111111 0.20000000 0.06666667
100 * proportions(dataGender)
## 막대 그래프
### ggplot(데이터, aes(범주형 범주)) + geom_bar
ggplot(course, aes(year)) + geom_bar
# 패키지 로딩
library(ggplot2)
## 막대 그래프
### ggplot(데이터, aes(범주형 범주)) + geom_bar
ggplot(course, aes(year)) + geom_bar
## 막대 그래프
### ggplot(데이터, aes(범주형 범주)) + geom_bar
ggplot(course, aes(year)) + geom_bar()
## 막대 그래프
### ggplot(데이터, aes(범주형 범주)) + geom_bar
ggplot(course, aes(year)) + geom_bar(fill = 'orange')
### 상대 빈도를 이용해서 막대그래프를 그릴 때
### ggplot(데이터, aes(x = 범주형 변수, y = after_stat(prop), gruop = 1)) + geom_bar
ggplot(course, aes(year, after_stat(prop), group = 1)) + geom_bar()
ggplot(mpg, aes(class)) + geom_bar()
ggplot(mpg, aes(class)) + geom_bar() + coord_flip()
ggplot(mpg, aes(reorder(class)) + geom_bar() + coord_flip()
ggplot(mpg, aes(reorder(class))) + geom_bar() + coord_flip()
ggplot(mpg, aes(x = reorder(class))) + geom_bar() + coord_flip()
ggplot(mpg, aes(class)) + geom_bar() + coord_flip()
## 빈도 순으로 막대를 표시하는 함수
### ggplot(데이터, aes(x = reorder(범주형 변수, 범주형 변수, length))) + geom_bar()
ggplot(mpg, aes(reorder(class, class, length)) + geom_bar() + coord_flip() + labs(x = '자동차 종류')
## 빈도 순으로 막대를 표시하는 함수
### ggplot(데이터, aes(x = reorder(범주형 변수, 범주형 변수, length))) + geom_bar()
ggplot(mpg, aes(reorder(class, class, length))) + geom_bar() + coord_flip() + labs(x = '자동차 종류')
ggplot(course, aes(reorder(year, year, length))) + geom_bar()
reorder(course$gender, course$score, mean)
ggplot(course, aes(reorder(gender, score, mean), score)) + geom_boxplot()
# 파이 차트: pie(빈도표)
pie(dataYear, main = '학년별 수강생 비율')
labels <- paste0(names(dataYear), '학년: , ' round(proportions(dataYear)*100, 2), '%')
labels <- paste0(names(dataYear), '학년: ', round(proportions(dataYear)*100, 2), '%')
# 파이 차트: pie(빈도표)
pie(dataYear, main = '학년별 수강생 비율', labels = labels)
# 범주형 변수들 간의 상관성을 수치로 요약하는 방법 - 교차표
## 절대 빈도로 교차표(분할표)를 만든다.
### table() - base, xtabs() - stat, acast()나 dcast() - reshape2 패키지, count() - dplyr
#### table() 함수를 이용한 교차표
#### table(벡터1, 벡터2, ...)
#### table(df$v1, df$v2, ...)
table(course$gender, course$year)
# 범주형 변수들 간의 상관성을 수치로 요약하는 방법 - 교차표
## 절대 빈도로 교차표(분할표)를 만든다.
### table() - base, xtabs() - stat, acast()나 dcast() - reshape2 패키지, count() - dplyr
#### table() 함수를 이용한 교차표
#### table(벡터1, 벡터2, ...)
#### table(df$v1, df$v2, ...)
~table(course$gender, course$year)
table(course$gender, course$year, course$class)
# xtabs() 함수를 이용해서 교차표
data <- xtabs(~ gender + year, course)
data
#     year
# gender  1  2  3  4
# F  0 14  3  1
# M  1 18  6  2
xtabs(~ gender + year + class, course)
xtabs(~ gender + year, course, score >= 80)
cafe %>%
filter(order_date < '2018-01-01' & item = '아메리카노') %>%
cafe %>%
filter(as.Date(format(order_date, '%Y-%m-%d')) < '2018-01-01' & item = '아메리카노') %>%
cafe %>%
filter(as.Date(format(order_date, '%Y-%m-%d')) < '2018-01-01' & item == '아메리카노') %>%
summarise(count = n())
# 두 범주형 변수의 누적막대 그래프
ggplot(course, aes(year)) + geom_bar()
# 두 범주형 변수의 누적막대 그래프
ggplot(course, aes(year, fill = gender)) + geom_bar()
# 두 범주형 변수의 누적막대 그래프
ggplot(course, aes(year, fill = gender)) + geom_bar(position = 'dodge')
ggplot(course, aes(gender, fill = year)) + geom_bar(position = 'dodge')
# 상대 빈도를 이용한 막대 그래프
ggplot(course, aes(year, fill = gender)) + geom_bar(position = 'fill')
# 모자이크 그래프: ggmosiac # 결측치 파악에도 좋음 #
## 패키지 설치
install.packages('vcd')
## mosiac(범주형 변수2 ~ 범주형 변수1, data, direction = 'v')
library(vcd)
mosaic(gender ~ year, course, direction = 'v')
# 관절염 치료 임상시험 데이터 #
Arthritis
str(Arthritis)
# 문제 정의
## 1. 새로운 치료법은 효과가 있는가?
## 치료법(Treatment)과 증상 개선 여부
xtabs(~ Sex + Treatment, Arthritis)
table(is.na(Arthritis$ID))
table(is.na(Arthritis$Treatment))
table(is.na(Arthritis$Sex))
table(is.na(Arthritis$Age))
table(is.na(Arthritis$Improved))
## 2. 새로운 치료법의 효과는 성별에 따라 차이가 있는가?
## None < Some < Marked
xtabs(~ Sex + Improved, Arthritis)
#          Treatment
# Sex      Placebo Treated
# Female      32      27
# Male        11      14
mosaic(Sex ~ Treatment, Arthritis, direction = 'v')
#          Improved
# Sex      None Some Marked
# Female   25   12     22
# Male     17    2      6
mosaic(Sex ~ Treatment, Arthritis, direction = 'v')
mosaic(Sex ~ Improved, Arthritis, direction = 'v')
ggplot(Arthritis, aes(Sex, fill = Treatment)) + geom_bar()
ggplot(Arthritis, aes(Sex, fill = Treatment)) + geom_bar(position = 'dodge')
ggplot(Arthritis, aes(Sex, fill = Improved)) + geom_bar(position = 'dodge')
#          Improved
# Sex      None Some Marked
# Female   25   12     22
# Male     17    2      6
mosaic(Sex ~ Improved, Arthritis, direction = 'v')
#          Treatment
# Sex      Placebo Treated
# Female      32      27
# Male        11      14
mosaic(Sex ~ Treatment, Arthritis, direction = 'v')
t_f <- xtabs(~ Sex + Treatment, Arthritis, subset = Sex =='Female')
t_m <- xtabs(~ Sex + Improved, Arthritis, subset = Sex == 'Male')
full <- rbind(t_f, t_m)
## 2. 새로운 치료법의 효과는 성별에 따라 차이가 있는가?
## None < Some < Marked
check <- xtabs(~ Sex + Improved, Arthritis)
# 문제 정의
## 1. 새로운 치료법은 효과가 있는가?
## 치료법(Treatment)과 증상 개선 여부
check <- xtabs(~ Sex + Treatment, Arthritis)
round(proportions(check, margin = 1) 100 * 2)
round(proportions(check, margin = 1) * 100, 2)
## 가설검정: 통계적인 의미가 있는지 살펴보기 위해
## 카이제곱 검정(Chi-Square test): 두 범주형 변수가 서로 상관이 있는지 판단
## 귀무가설 - 차이가 없다.
## 대립가설 - 차이가 있다.
chisq.test(check)
## 2. 새로운 치료법의 효과는 성별에 따라 차이가 있는가?
## None < Some < Marked
check <- xtabs(~ Sex + Improved, Arthritis)
round(proportions(check, margin = 1) * 100, 2)
## 가설검정: 통계적인 의미가 있는지 살펴보기 위해
## 카이제곱 검정(Chi-Square test): 두 범주형 변수가 서로 상관이 있는지 판단
## 귀무가설 - 차이가 없다.
## 대립가설 - 차이가 있다.
chisq.test(check)
tsi_placebo <- xtabs(~ Sex + Improved, Arthritis, subset = Treatmennt == 'Placebo')
tsi_placebo <- xtabs(~ Sex + Improved, Arthritis, subset = Treatment == 'Placebo')
tsi_placebo
round(proportions(tsi_placebo, margin = 1) * 100, 2)
fisher.test(tsi_placebo)
tsi_treated <- xtabs(~ Sex + Improved, Arthritis, subset = Treatment == 'Treated')
tsi_treated
round(proportions(tsi_placebo, margin = 1) * 100, 2)
fisher.test(tsi_treated) # p-value = 0.1706 큰 의미가 없다
ggplot(Arthritis, aes(x = Treated, fill = Improbved)) + geom_bar() + facet_wrap(~Sex)
ggplot(Arthritis, aes(x = Treated, fill = Improbved)) + geom_bar() + facet_wrap(~Sex)
ggplot(Arthritis, aes(x = Treated, fill = Improbved)) + geom_bar(position = 'fill') + facet_wrap(~Sex)
ggplot(Arthritis, aes(x = Treatment, fill = Improbved)) + geom_bar(position = 'fill') + facet_wrap(~Sex)
ggplot(Arthritis, aes(x = Treatment, fill = Improved)) + geom_bar(position = 'fill') + facet_wrap(~Sex)
# 이혼에 대한 사회조사 데이터 셋
BrokenMarriage
xtaab(~gender + borken, BrokenMarriage)
xtab(~gender + borken, BrokenMarriage)
# xtabs(빈도변수 ~ 범주형 변수 + ...,data)
tgb <- xtabs(Freq ~ gender + broken, BrokenMarriage)
tgb
round(proportions(tgb, 2)* 100, 2)
chisq.test(tgb)
trb <- xtabs(Freq ~ broken + rank + BrokenMarriage)
trb <- xtabs(Freq ~ broken + rank, BrokenMarriage)
round(proportions(trb, 2)* 100, 2)
chisq.test(trb)
## 이렇게 축약된 데이터에서는 geom_bar() 보다는 geom_col()
## ggplot(date, aes(x = 범주형 변수, y = 빈도변수)) + geom_col()
## ggplot(date, aes(x = 범주형 변수, y = 빈도변수, fill = 범주형 변수2)) + geom_col()
## ggplot(date, aes(x = 범주형 변수, y = 빈도변수, fill = 범줗형 변수2)) + geom_col(position = 'dodge' or 'fill')
ggplot(BrokenMarriage, aes(x = rank, y = Freq, fill = broken)) + geom_col() + facet_wrap(~gender)
ggplot(BrokenMarriage, aes(x = rank, y = Freq, fill = broken)) + geom_col(position = 'fill') + facet_wrap(~gender)
#
t_f <- xtabs(~ Sex + Treatment, Arthritis, subset = Sex =='Female')
t_m <- xtabs(~ Sex + Improved, Arthritis, subset = Sex == 'Male')
full <- rbind(t_f, t_m)
mean(course$mid, na.rm = T)
### 중앙값 median():n/2, n+1/2
median(course$score)
median(course$score, na.rm = T)
median(course$mid, na.rm = T)
### course 데이터의 총점의 평균 추출
mean(course$score)
var(course$mid)
### 분산 var(), 표준편차 sd()
var(course$score)
# 산점도
## ggplot(data, aes(x, y)) + geom_point()
ggplot(course, aes(x = min, y = final)) + geom_point()
# 산점도
## ggplot(data, aes(x, y)) + geom_point()
ggplot(course, aes(x = mid, y = final)) + geom_point()
plot(course[, 5:8])
# 추세선: geom_smoth()
ggplot(course, aes(x = mid, y = final)) + geom_point() + geom_smooth()
ggplot(course, aes(x = mid, y = final)) + geom_point() + geom_smooth(method = 'lm')
#ggparis()
install.packages('GGally')
GGally::ggpairs(course, 5:8)
str(diamonds)
# slice_sample()
diamonds_sample <- slice_sample(diamonds, prop = 0.1)
diamonds_sample
ggplot(diamonds_sample, aes(x = carat, y = price)) + geom_point() + geom_smooth()
cor(diamonds_sample$carat, diamonds_sample$price)
ggplot(diamonds_sample, aes(x = carat, y = price)) + geom_point() + geom_smooth() +
scale_x_log10() + scale_y_log10()
cor(log10(diamonds_sample$carat), log10(diamonds_sample$price))
# 범주형 변수를 조건으로 수치형 변수의 상관성 분석
ggplot(diamonds_sample, aes(x = carat, y = price, color = cut)) + geom_point() +
geom_smooth(se = F) +
scale_x_log10() + scale_y_log10()
# 범주형 변수를 조건으로 수치형 변수의 상관성 분석
ggplot(diamonds_sample, aes(x = carat, y = price, color = cut)) +
geom_smooth() +
scale_x_log10() + scale_y_log10()
ggplot(diamonds_sample, aes(x = carat, y = price, color = cut)) +
geom_smooth(se = F) +
scale_x_log10() + scale_y_log10()
ggplot(diamonds_sample, aes(x = carat, y = clarity)) +
geom_point(alpha) +
geom_smooth() +
scale_x_log10() + scale_y_log10()
ggplot(diamonds_sample, aes(x = carat, y = clarity)) +
geom_point(alpha = 0.1) +
geom_smooth() +
scale_x_log10() + scale_y_log10()
ggplot(diamonds_sample, aes(x = carat, y = price, color = clarity)) +
geom_point(alpha = 0.1) +
geom_smooth() +
scale_x_log10() + scale_y_log10()
ggplot(diamonds_sample, aes(x = carat, y = price)) +
geom_point(alpha = 0.1) +
geom_smooth() +
scale_x_log10() + scale_y_log10() +
facet_wrap(~ clarity)
t_f
t_m
full <- cbind(t_f, t_m)
full
